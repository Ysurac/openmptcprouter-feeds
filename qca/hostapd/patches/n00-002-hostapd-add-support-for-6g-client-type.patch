From 2a556ebff47bebcda6a1c7c8cd760bd38de54ff4 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Fri, 22 Oct 2021 22:50:37 +0530
Subject: [PATCH] hostapd: add support for 6g client type

IEEE Std 802.11ax™‐2021 introduces two types of client
namely DEFAULT and SUBORDINATE client for 6GHz device.

This patch -
 * add u8 he_6ghz_reg_client_type member in struct wpa_config
   to store the 6g configured mode.
 * add new nl80211 ops - set_6gclient_type, which will be used
   to send the 6G client type via existing NL80211_CMD_SET_INTERFACE
   command.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 src/drivers/driver.h            |  8 ++++++++
 src/drivers/driver_nl80211.c    | 26 ++++++++++++++++++++++++++
 wpa_supplicant/config.c         |  2 ++
 wpa_supplicant/config.h         | 11 +++++++++++
 wpa_supplicant/driver_i.h       |  8 ++++++++
 wpa_supplicant/wpa_supplicant.c |  9 +++++++++
 6 files changed, 64 insertions(+)

--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -4694,6 +4694,14 @@ struct wpa_driver_ops {
 	 * explicitly allow reception of broadcast Public Action frames.
 	 */
 	int (*dpp_listen)(void *priv, bool enable);
+
+	/**
+	 * set_6gclient_type - Set the client type for 6G interface
+	 * @priv: Private driver interface data
+	 * @client_type_6g: 0 - Default Client, 1 - Subordinate Client
+	 * Returns: 0 on success, < 0 on failure
+	 */
+	int (*set_6gclient_type)(void *priv, u8 client_type_6g);
 };
 
 /**
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -12173,6 +12173,31 @@ static int nl80211_dpp_listen(void *priv
 }
 #endif /* CONFIG_DPP */
 
+static int nl80211_set_6gclient_type(void *priv, u8 client_type_6g)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+	int ret = -ENOBUFS;
+
+	wpa_printf(MSG_DEBUG, "nl80211: 6g client type: %d",
+		   client_type_6g);
+
+	msg = nl80211_cmd_msg(drv->first_bss, 0, NL80211_CMD_SET_INTERFACE);
+	if (!msg || nla_put_u8(msg, NL80211_ATTR_6G_REG_POWER_MODE,
+			       client_type_6g))
+		goto fail;
+
+	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
+
+	if(ret)
+		wpa_printf(MSG_DEBUG, "nl80211: 6g client type could not be set (%d)",
+			   ret);
+	return ret;
+fail:
+	nlmsg_free(msg);
+	return ret;
+}
 
 const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.name = "nl80211",
@@ -12315,4 +12340,5 @@ const struct wpa_driver_ops wpa_driver_n
 #ifdef CONFIG_DPP
 	.dpp_listen = nl80211_dpp_listen,
 #endif /* CONFIG_DPP */
+	.set_6gclient_type = nl80211_set_6gclient_type,
 };
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -5394,6 +5394,8 @@ static const struct global_parse_data gl
 	{ INT_RANGE(force_kdk_derivation, 0, 1), 0 },
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_PASN */
+	{ INT_RANGE(he_6ghz_reg_client_type, 1, 2),
+	  CFG_CHANGED_HE_6GHZ_CLIENT_TYPE},
 };
 
 #undef FUNC
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -378,6 +378,7 @@ struct wpa_cred {
 #define CFG_CHANGED_WOWLAN_TRIGGERS BIT(18)
 #define CFG_CHANGED_DISABLE_BTM BIT(19)
 #define CFG_CHANGED_BGSCAN BIT(20)
+#define CFG_CHANGED_HE_6GHZ_CLIENT_TYPE BIT(21)
 
 /**
  * struct wpa_config - wpa_supplicant configuration data
@@ -1650,6 +1651,16 @@ struct wpa_config {
 	int force_kdk_derivation;
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_PASN*/
+
+	/**
+	 * he_6ghz_reg_client_type - Type of client in 6GHz band
+	 *
+	 * IEEE Std 802.11ax™‐2021 allows two kinds of client
+	 *
+	 * 1 = DEFAULT or REGULAR CLIENT
+	 * 2 = SUBORDINATE CLIENT
+	 */
+	u8 he_6ghz_reg_client_type;
 };
 
 
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -1117,4 +1117,12 @@ static inline int wpa_drv_dpp_listen(str
 	return wpa_s->driver->dpp_listen(wpa_s->drv_priv, enable);
 }
 
+static inline int wpa_drv_set_6gclient_type(struct wpa_supplicant *wpa_s,
+					    u8 he_6ghz_reg_client_type)
+{
+	if (!wpa_s->driver->set_6gclient_type)
+		return -1;
+	return wpa_s->driver->set_6gclient_type(wpa_s->drv_priv,
+						he_6ghz_reg_client_type);
+}
 #endif /* DRIVER_I_H */
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -5212,6 +5212,15 @@ int wpa_supplicant_driver_init(struct wp
 	wpa_dbg(wpa_s, MSG_DEBUG, "RSN: flushing PMKID list in the driver");
 	wpa_drv_flush_pmkid(wpa_s);
 
+	/* Before starting scan, for 6g interface, set the client type */
+	if (wpa_s->conf->changed_parameters & CFG_CHANGED_HE_6GHZ_CLIENT_TYPE) {
+		u8 he_6ghz_reg_client_type = wpa_s->conf->he_6ghz_reg_client_type;
+		/**
+		 * Subtract 1 to map the client type with 0 indexing
+		 */
+		wpa_drv_set_6gclient_type(wpa_s, he_6ghz_reg_client_type - 1);
+	}
+
 	wpa_s->prev_scan_ssid = WILDCARD_SSID_SCAN;
 	wpa_s->prev_scan_wildcard = 0;
 
--- a/wpa_supplicant/wpa_supplicant.conf
+++ b/wpa_supplicant/wpa_supplicant.conf
@@ -589,6 +589,15 @@ fast_reauth=1
 # 1 = Publish
 #ftm_initiator=0

+# 6GHz regulatory client type
+# This sets the 6GHz client type. Possible options are
+# 1 = Default Client
+# 2 = Subordinate Client
+# Note that value 0 is reserved and can not be used. For 6GHz operation
+# user has to choose from either 1 or 2. If not mentioned, no type will
+# be set from user side. Wireless stack will handle its own default case.
+#he_6ghz_reg_client_type=1
+
 # credential block
 #
 # Each credential used for automatic network selection is configured as a set
