From ac00ef8cee57786023bf1fedf8c3e0e3921bb682 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 20 Oct 2021 17:53:52 +0530
Subject: [PATCH] ath11k: update all 6G reg rules in sband

Based on the power modes in 6G band, there can be total of 9
possible channel arrays in sband. This patch updates the 6G
sband with all possible 9 modes. The sband will be updated
with default values since we dont know the power mode during
sband setup (initial boot).

Once the FW sends the reg rules and regd is built, cfg80211
will update the sband as per the rules. To aid cfg80211 to
distinguish between the power mode, the ath11k updates the
power mode as well while building regulatory domain.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/mac.c | 58 ++++++++++++++++++++++++++++-------
 drivers/net/wireless/ath/ath11k/reg.c | 33 +++++++++++++-------
 2 files changed, 69 insertions(+), 22 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -10478,11 +10478,24 @@ static void ath11k_mac_update_ch_list(st
 				      struct ieee80211_supported_band *band,
 				      u32 freq_low, u32 freq_high)
 {
-	int i;
+	struct ieee80211_6ghz_channel *chan_6g;
+	int i, j;
 
 	if (!(freq_low && freq_high))
 		return;
 
+	if (band->band == NL80211_BAND_6GHZ) {
+		for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+			chan_6g = band->chan_6g[i];
+			for (j = 0; j < chan_6g->n_channels; j++) {
+				if (chan_6g->channels[j].center_freq < freq_low ||
+				    chan_6g->channels[j].center_freq > freq_high)
+					chan_6g->channels[j].flags |= IEEE80211_CHAN_DISABLED;
+			}
+		}
+		return;
+	}
+
 	for (i = 0; i < band->n_channels; i++) {
 		if (band->channels[i].center_freq < freq_low ||
 		    band->channels[i].center_freq > freq_high)
@@ -10537,7 +10550,9 @@ static int ath11k_mac_setup_channels_rat
 	struct ieee80211_supported_band *band;
 	struct ath11k_hal_reg_capabilities_ext *reg_cap;
 	void *channels;
+	struct ieee80211_6ghz_channel *chan_6g;
 	u32 phy_id;
+	int i = 0;
 
 	BUILD_BUG_ON((ARRAY_SIZE(ath11k_2ghz_channels) +
 		      ARRAY_SIZE(ath11k_5ghz_channels) +
@@ -10584,7 +10599,9 @@ static int ath11k_mac_setup_channels_rat
 					   GFP_KERNEL);
 			if (!channels) {
 				kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
-				kfree(ar->mac.sbands[NL80211_BAND_6GHZ].channels);
+				for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++)
+					 kfree(ar->mac.sbands[NL80211_BAND_6GHZ].chan_6g[i]);
+
 				return -ENOMEM;
 			}
 
@@ -10610,18 +10627,35 @@ static int ath11k_mac_setup_channels_rat
 			ath11k_mac_update_5_dot_9_ch_list(ar, band);
 		} else if (reg_cap->low_5ghz_chan >= ATH11K_MIN_6G_FREQ &&
 		    	   reg_cap->high_5ghz_chan <= ATH11K_MAX_6G_FREQ) {
-			channels = kmemdup(ath11k_6ghz_channels,
-					   sizeof(ath11k_6ghz_channels), GFP_KERNEL);
-			if (!channels) {
-				kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
-				return -ENOMEM;
+			band = &ar->mac.sbands[NL80211_BAND_6GHZ];
+			band->band = NL80211_BAND_6GHZ;
+			for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+				channels = kmemdup(ath11k_6ghz_channels,
+						sizeof(ath11k_6ghz_channels),
+						GFP_KERNEL);
+				chan_6g = kzalloc(sizeof(*chan_6g), GFP_ATOMIC);
+
+				if (!channels || !chan_6g) {
+					kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
+					break;
+				}
+
+				chan_6g->channels = channels;
+				chan_6g->n_channels = ARRAY_SIZE(ath11k_6ghz_channels);
+				band->chan_6g[i] = chan_6g;
+				channels = NULL;
+				chan_6g = NULL;
 			}
 
+			if (i < NL80211_REG_NUM_POWER_MODES) {
+				for (i = i - 1; i >= 0; i--) {
+					chan_6g = band->chan_6g[i];
+					kfree(chan_6g->channels);
+					kfree(chan_6g);
+				}
+				return -ENOMEM;
+			}
 			ar->supports_6ghz = true;
-			band = &ar->mac.sbands[NL80211_BAND_6GHZ];
-			band->band = NL80211_BAND_6GHZ;
-			band->n_channels = ARRAY_SIZE(ath11k_6ghz_channels);
-			band->channels = channels;
 			band->n_bitrates = ath11k_a_rates_size;
 			band->bitrates = ath11k_a_rates;
 			ar->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
@@ -10630,6 +10664,14 @@ static int ath11k_mac_setup_channels_rat
 						      ab->reg_rule_6g.start_freq),
 						  min(reg_cap->high_5ghz_chan,
 						      ab->reg_rule_6g.end_freq));
+			/* For 6G sband, the strcut channels and int numchannels will
+			 * have the default value. During ieee80211_hw_register(),
+			 * all sbands are parsed and at that time code can crash while
+			 * dereferencing the NULL pointer struct channel. Hence, we
+			 * assign the LPI AP channel to the default sband channel
+			 * to prevent APIs from breaking */
+			band->n_channels = band->chan_6g[0]->n_channels;
+			band->channels = band->chan_6g[0]->channels;
 		}
 	}
 
--- a/drivers/net/wireless/ath/ath11k/reg.c
+++ b/drivers/net/wireless/ath/ath11k/reg.c
@@ -267,6 +267,7 @@ ath11k_reg_can_intersect(struct ieee8021
 {
 	u32 start_freq1, end_freq1;
 	u32 start_freq2, end_freq2;
+	u8 reg_6g_pwr_mode1, reg_6g_pwr_mode2;
 
 	start_freq1 = rule1->freq_range.start_freq_khz;
 	start_freq2 = rule2->freq_range.start_freq_khz;
@@ -274,6 +275,15 @@ ath11k_reg_can_intersect(struct ieee8021
 	end_freq1 = rule1->freq_range.end_freq_khz;
 	end_freq2 = rule2->freq_range.end_freq_khz;
 
+	reg_6g_pwr_mode1 = rule1->mode;
+	reg_6g_pwr_mode2 = rule2->mode;
+
+	/* 6G reg rules can not intersect if power mode is not same.
+	 * NOTE: For 2G/5G rules, it will be always 0.
+	 */
+	if (reg_6g_pwr_mode1 != reg_6g_pwr_mode2)
+		return false;
+
 	if ((start_freq1 >= start_freq2 &&
 	     start_freq1 < end_freq2) ||
 	    (start_freq2 > start_freq1 &&
@@ -330,6 +340,11 @@ static void ath11k_reg_intersect_rules(s
 	/* To be safe, lts use the max cac timeout of both rules */
 	new_rule->dfs_cac_ms = max_t(u32, rule1->dfs_cac_ms,
 				     rule2->dfs_cac_ms);
+
+	/* Intersection is only possible when both modes was same.
+	 * Hence, we can use pwr mode from any rule
+	 */
+	new_rule->mode = rule2->mode;
 }
 
 static struct ieee80211_regdomain *
@@ -424,13 +439,15 @@ ath11k_reg_adjust_bw(u16 start_freq, u16
 static void
 ath11k_reg_update_rule(struct ieee80211_reg_rule *reg_rule, u32 start_freq,
 		       u32 end_freq, u32 bw, u32 ant_gain, u32 reg_pwr,
-		       s8 psd, u32 reg_flags)
+		       s8 psd, u32 reg_flags,
+		       enum nl80211_regulatory_power_modes pwr_mode)
 {
 	reg_rule->freq_range.start_freq_khz = MHZ_TO_KHZ(start_freq);
 	reg_rule->freq_range.end_freq_khz = MHZ_TO_KHZ(end_freq);
 	reg_rule->freq_range.max_bandwidth_khz = MHZ_TO_KHZ(bw);
 	reg_rule->power_rule.max_antenna_gain = DBI_TO_MBI(ant_gain);
 	reg_rule->power_rule.max_eirp = DBM_TO_MBM(reg_pwr);
+	reg_rule->mode = pwr_mode;
 	reg_rule->psd = psd;
 	reg_rule->flags = reg_flags;
 }
@@ -453,7 +470,7 @@ ath11k_reg_update_weather_radar_band(str
 	ath11k_reg_update_rule(regd->reg_rules + i, reg_rule->start_freq,
 			       ETSI_WEATHER_RADAR_BAND_LOW, bw,
 			       reg_rule->ant_gain, reg_rule->reg_power,
-			       reg_rule->psd_eirp, flags);
+			       reg_rule->psd_eirp, flags, 0);
 
 	ath11k_dbg(ab, ATH11K_DBG_REG,
 		   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
@@ -475,7 +492,7 @@ ath11k_reg_update_weather_radar_band(str
 	ath11k_reg_update_rule(regd->reg_rules + i,
 			       ETSI_WEATHER_RADAR_BAND_LOW, end_freq, bw,
 			       reg_rule->ant_gain, reg_rule->reg_power,
-			       reg_rule->psd_eirp, flags);
+			       reg_rule->psd_eirp, flags, 0);
 
 	regd->reg_rules[i].dfs_cac_ms = ETSI_WEATHER_RADAR_BAND_CAC_TIMEOUT;
 
@@ -500,7 +517,7 @@ ath11k_reg_update_weather_radar_band(str
 	ath11k_reg_update_rule(regd->reg_rules + i, ETSI_WEATHER_RADAR_BAND_HIGH,
 			       reg_rule->end_freq, bw,
 			       reg_rule->ant_gain, reg_rule->reg_power,
-			       reg_rule->psd_eirp, flags);
+			       reg_rule->psd_eirp, flags, 0);
 
 	ath11k_dbg(ab, ATH11K_DBG_REG,
 		   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
@@ -540,7 +557,8 @@ ath11k_ieee80211_ap_pwr_type_convert(enu
 
 static struct cur_reg_rule
 *ath11k_get_active_6g_reg_rule(struct cur_regulatory_info *reg_info,
-			       u32 *max_bw_6g, int *max_elements)
+			       u32 *max_bw_6g, int *max_elements,
+			       enum nl80211_regulatory_power_modes *pwr_mode)
 {
 	struct cur_reg_rule *reg_rule = NULL;
 	u8 i = 0, j = 0;
@@ -551,6 +569,7 @@ static struct cur_reg_rule
 			reg_rule = reg_info->reg_rules_6g_ap_ptr[i];
 			*max_bw_6g = reg_info->max_bw_6g_ap[i];
 			reg_info->num_6g_reg_rules_ap[i] = 0;
+			*pwr_mode = i;
 			return reg_rule;
 		}
 	}
@@ -564,6 +583,7 @@ static struct cur_reg_rule
 								      [j][i];
 				*max_bw_6g = reg_info->max_bw_6g_client[j][i];
 				reg_info->num_6g_reg_rules_client[j][i] = 0;
+				*pwr_mode = WMI_REG_CURRENT_MAX_AP_TYPE * (i + 1)  + j;
 				return reg_rule;
 			}
 		}
@@ -585,6 +605,7 @@ ath11k_reg_build_regd(struct ath11k_base
 	u32 flags, reg_6g_number = 0, max_bw_6g = 0;
 	char alpha2[3];
 	bool reg_6g_itr_set = false;
+	enum nl80211_regulatory_power_modes pwr_mode;
 
 	num_rules = reg_info->num_5g_reg_rules + reg_info->num_2g_reg_rules;
 
@@ -637,6 +658,7 @@ ath11k_reg_build_regd(struct ath11k_base
 			max_bw = min_t(u16, reg_rule->max_bw,
 				       reg_info->max_bw_2g);
 			flags = 0;
+			pwr_mode = 0;
 			ath11k_copy_reg_rule(&ab->reg_rule_2g, reg_rule);
 		} else if (reg_info->num_5g_reg_rules &&
 			   (j < reg_info->num_5g_reg_rules)) {
@@ -651,6 +673,7 @@ ath11k_reg_build_regd(struct ath11k_base
 			 * per other BW rule flags we pass from here
 			 */
 			flags = NL80211_RRF_AUTO_BW;
+			pwr_mode = 0;
 
 			if (reg_rule->end_freq <= ATH11K_MAX_5G_FREQ)
 				ath11k_copy_reg_rule(&ab->reg_rule_5g, reg_rule);
@@ -659,8 +682,8 @@ ath11k_reg_build_regd(struct ath11k_base
 
 		} else if (reg_info->is_ext_reg_event && reg_6g_number) {
 			if (!reg_6g_itr_set) {
-				reg_rule_6g = ath11k_get_active_6g_reg_rule(reg_info,
-							  &max_bw_6g, &max_elements);
+				reg_rule_6g = ath11k_get_active_6g_reg_rule(reg_info, &max_bw_6g,
+								       &max_elements, &pwr_mode);
 
 				if (!reg_rule_6g) {
 					ath11k_warn(ab,
@@ -679,7 +702,10 @@ ath11k_reg_build_regd(struct ath11k_base
 				if (reg_rule->psd_flag)
 					flags |= NL80211_RRF_PSD;
 
-				ath11k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+				if (reg_rule->end_freq <= ATH11K_MAX_6G_FREQ)
+					ath11k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+				else if (reg_rule->start_freq >= ATH11K_MIN_6G_FREQ)
+					ath11k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
 			}
 
 			if (reg_6g_itr_set && k >= max_elements) {
@@ -700,7 +726,7 @@ ath11k_reg_build_regd(struct ath11k_base
 				       reg_rule->start_freq,
 				       reg_rule->end_freq, max_bw,
 				       reg_rule->ant_gain, reg_rule->reg_power,
-				       reg_rule->psd_eirp, flags);
+				       reg_rule->psd_eirp, flags, pwr_mode);
 
 		/* Update dfs cac timeout if the dfs domain is ETSI and the
 		 * new rule covers weather radar band.
@@ -719,11 +745,11 @@ ath11k_reg_build_regd(struct ath11k_base
 
 		if (reg_info->is_ext_reg_event) {
 			ath11k_dbg(ab, ATH11K_DBG_REG,
-				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d) (%d, %d) \n",
+				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d) (%d, %d) (6G_POWER_MODE: %d)\n",
 				   i + 1, reg_rule->start_freq, reg_rule->end_freq, max_bw,
 				   reg_rule->ant_gain, reg_rule->reg_power,
 				   tmp_regd->reg_rules[i].dfs_cac_ms, flags, reg_rule->psd_flag,
-				   reg_rule->psd_eirp);
+				   reg_rule->psd_eirp, tmp_regd->reg_rules[i].mode);
 		} else {
 			ath11k_dbg(ab, ATH11K_DBG_REG,
 				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
