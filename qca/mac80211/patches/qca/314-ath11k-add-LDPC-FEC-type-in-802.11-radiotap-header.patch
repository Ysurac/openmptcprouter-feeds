From 2f3b14c7d5caba918cb6a3042635fbb53a1ec67a Mon Sep 17 00:00:00 2001
From: P Praneesh <ppranees@codeaurora.org>
Date: Fri, 21 May 2021 18:15:38 +0530
Subject: [PATCH] ath11k: add LDPC FEC type in 802.11 radiotap header

LDPC is one the FEC type advertised in msdu_start
info2 for HT packet type. Hence added hardware
specifc callback for fetching LDPC support from
msdu start and enable RX_ENC_FLAG_LDPC flag while
passing rx status to mac80211.

In mac80211, while building radiotap header appending
IEEE80211_RADIOTAP_MCS_HAVE_FEC flag is missing when
LDPC enabled, Hence LDPC is not updated properly in
radiotap header. Fixed that by adding HAVE_FEC flag
while building radiotap header.

Signed-off-by: P Praneesh <ppranees@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/dp_rx.c | 11 ++++++++++-
 drivers/net/wireless/ath/ath11k/hw.c    | 18 ++++++++++++++++++
 drivers/net/wireless/ath/ath11k/hw.h    |  1 +
 net/mac80211/rx.c                       |  9 ++++++++-
 4 files changed, 37 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -41,6 +41,12 @@ static inline u8 ath11k_dp_rx_h_msdu_sta
 	return ab->hw_params.hw_ops->rx_desc_get_decap_type(desc);
 }
 
+static inline bool ath11k_dp_rx_h_msdu_start_ldpc_support(struct ath11k_base *ab,
+							  struct hal_rx_desc *desc)
+{
+	return ab->hw_params.hw_ops->rx_desc_get_ldpc_support(desc);
+}
+
 static inline u8 ath11k_dp_rx_h_msdu_start_mesh_ctl_present(struct ath11k_base *ab,
 						     struct hal_rx_desc *desc)
 {
@@ -2817,7 +2823,7 @@ static void ath11k_dp_rx_h_rate(struct a
 	u8 bw;
 	u8 rate_mcs, nss;
 	u8 sgi;
-	bool is_cck;
+	bool is_cck, is_ldpc;
 
 	pkt_type = ath11k_dp_rx_h_msdu_start_pkt_type(ar->ab, rx_desc);
 	bw = ath11k_dp_rx_h_msdu_start_rx_bw(ar->ab, rx_desc);
@@ -2845,6 +2851,9 @@ static void ath11k_dp_rx_h_rate(struct a
 		if (sgi)
 			rx_status->enc_flags |= RX_ENC_FLAG_SHORT_GI;
 		rx_status->bw = ath11k_mac_bw_to_mac80211_bw(bw);
+		is_ldpc = ath11k_dp_rx_h_msdu_start_ldpc_support(ar->ab, rx_desc);
+		if (is_ldpc)
+			rx_status->enc_flags |= RX_ENC_FLAG_LDPC;
 		break;
 	case RX_MSDU_START_PKT_TYPE_11AC:
 		rx_status->encoding = RX_ENC_VHT;
--- a/drivers/net/wireless/ath/ath11k/hw.c
+++ b/drivers/net/wireless/ath/ath11k/hw.c
@@ -225,6 +225,12 @@ static u8 ath11k_hw_ipq8074_rx_desc_get_
 			 __le32_to_cpu(desc->u.ipq8074.msdu_start.info2));
 }
 
+static bool ath11k_hw_ipq8074_rx_desc_get_ldpc_support(struct hal_rx_desc *desc)
+{
+	return FIELD_GET(RX_MSDU_START_INFO2_LDPC,
+			  __le32_to_cpu(desc->u.ipq8074.msdu_start.info2));
+}
+
 static u8 ath11k_hw_ipq8074_rx_desc_get_ip_valid(struct hal_rx_desc *desc)
 {
 	bool ipv4, ipv6;
@@ -556,6 +562,12 @@ static u8 ath11k_hw_qcn9074_rx_desc_get_
 			 __le32_to_cpu(desc->u.qcn9074.msdu_start.info2));
 }
 
+static bool ath11k_hw_qcn9074_rx_desc_get_ldpc_support(struct hal_rx_desc *desc)
+{
+	return FIELD_GET(RX_MSDU_START_INFO2_LDPC,
+			 __le32_to_cpu(desc->u.qcn9074.msdu_start.info2));
+}
+
 static u8 ath11k_hw_qcn9074_rx_desc_get_ip_valid(struct hal_rx_desc *desc)
 {
 	bool ipv4 , ipv6;
@@ -981,6 +993,7 @@ const struct ath11k_hw_ops ipq8074_ops =
 	.rx_desc_get_crypto_header = ath11k_hw_ipq8074_rx_desc_get_crypto_hdr,
 	.fill_cfr_hdr_info = ath11k_hw_ipq8074_fill_cfr_hdr_info,
 	.rx_desc_get_hal_ppdu_id = ath11k_hw_ipq8074_rx_desc_get_hal_mpdu_ppdu_id,
+	.rx_desc_get_ldpc_support = ath11k_hw_ipq8074_rx_desc_get_ldpc_support,
 };
 
 const struct ath11k_hw_ops ipq6018_ops = {
@@ -1031,6 +1044,7 @@ const struct ath11k_hw_ops ipq6018_ops =
 	.rx_desc_get_dot11_hdr = ath11k_hw_ipq8074_rx_desc_get_dot11_hdr,
 	.rx_desc_get_crypto_header = ath11k_hw_ipq8074_rx_desc_get_crypto_hdr,
 	.rx_desc_get_hal_ppdu_id = ath11k_hw_ipq8074_rx_desc_get_hal_mpdu_ppdu_id,
+	.rx_desc_get_ldpc_support = ath11k_hw_ipq8074_rx_desc_get_ldpc_support,
 };
 
 const struct ath11k_hw_ops qca6390_ops = {
@@ -1078,6 +1092,7 @@ const struct ath11k_hw_ops qca6390_ops =
 	.rx_desc_get_dot11_hdr = ath11k_hw_ipq8074_rx_desc_get_dot11_hdr,
 	.rx_desc_get_crypto_header = ath11k_hw_ipq8074_rx_desc_get_crypto_hdr,
 	.rx_desc_get_hal_ppdu_id = ath11k_hw_ipq8074_rx_desc_get_hal_mpdu_ppdu_id,
+	.rx_desc_get_ldpc_support = ath11k_hw_ipq8074_rx_desc_get_ldpc_support,
 	//TODO
 	/*	.rx_desc_get_da_mcbc,
 		.rx_desc_mac_addr2_valid,
@@ -1134,6 +1149,7 @@ const struct ath11k_hw_ops qcn9074_ops =
 	.rx_desc_get_crypto_header = ath11k_hw_qcn9074_rx_desc_get_crypto_hdr,
 	.fill_cfr_hdr_info = ath11k_hw_qcn9074_fill_cfr_hdr_info,
 	.rx_desc_get_hal_ppdu_id = ath11k_hw_qcn9074_rx_desc_get_hal_mpdu_ppdu_id,
+	.rx_desc_get_ldpc_support = ath11k_hw_qcn9074_rx_desc_get_ldpc_support,
 };
 
 /* IPQ5018 hw ops is similar to QCN9074 except for the dest ring remap */
@@ -1185,6 +1201,7 @@ const struct ath11k_hw_ops ipq5018_ops =
 	.rx_desc_get_dot11_hdr = ath11k_hw_qcn9074_rx_desc_get_dot11_hdr,
 	.rx_desc_get_crypto_header = ath11k_hw_qcn9074_rx_desc_get_crypto_hdr,
 	.rx_desc_get_hal_ppdu_id = ath11k_hw_qcn9074_rx_desc_get_hal_mpdu_ppdu_id,
+	.rx_desc_get_ldpc_support = ath11k_hw_qcn9074_rx_desc_get_ldpc_support,
  };
 
 const struct ath11k_hw_ops qcn6122_ops = {
@@ -1235,6 +1252,7 @@ const struct ath11k_hw_ops qcn6122_ops =
 	.rx_desc_get_dot11_hdr = ath11k_hw_qcn9074_rx_desc_get_dot11_hdr,
 	.rx_desc_get_crypto_header = ath11k_hw_qcn9074_rx_desc_get_crypto_hdr,
 	.rx_desc_get_hal_ppdu_id = ath11k_hw_qcn9074_rx_desc_get_hal_mpdu_ppdu_id,
+	.rx_desc_get_ldpc_support = ath11k_hw_qcn9074_rx_desc_get_ldpc_support,
 };
 
 #define ATH11K_TX_RING_MASK_0 0x1
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -452,7 +452,14 @@ ieee80211_add_rx_radiotap_header(struct
 		unsigned int stbc;
 
 		rthdr->it_present |= cpu_to_le32(1 << IEEE80211_RADIOTAP_MCS);
-		*pos++ = local->hw.radiotap_mcs_details;
+
+		*pos = local->hw.radiotap_mcs_details;
+		if (status->enc_flags & RX_ENC_FLAG_HT_GF)
+			*pos |= IEEE80211_RADIOTAP_MCS_HAVE_FMT;
+		if (status->enc_flags & RX_ENC_FLAG_LDPC)
+			*pos |= IEEE80211_RADIOTAP_MCS_HAVE_FEC;
+		pos++;
+
 		*pos = 0;
 		if (status->enc_flags & RX_ENC_FLAG_SHORT_GI)
 			*pos |= IEEE80211_RADIOTAP_MCS_SGI;
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -274,6 +274,7 @@ struct ath11k_hw_ops {
 				  struct ath11k_csi_cfr_header *header,
 				  struct ath11k_cfr_peer_tx_param *params);
 	u16 (*rx_desc_get_hal_ppdu_id) (struct hal_rx_mpdu_info *mpdu_info);
+	bool (*rx_desc_get_ldpc_support)(struct hal_rx_desc *desc);
 };
 
 extern const struct ath11k_hw_ops ipq8074_ops;
