--- a/drivers/net/wireless/ath/ath11k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs_htt_stats.c
@@ -11,23 +11,22 @@
 #include "debugfs_htt_stats.h"
 
 #define HTT_DBG_OUT(buf, len, fmt, ...) \
-			scnprintf(buf, len, fmt "\n", ##__VA_ARGS__)
+			scnprintf(buf, len, fmt, ##__VA_ARGS__)
 
-#define HTT_MAX_STRING_LEN 256
 #define HTT_MAX_PRINT_CHAR_PER_ELEM 15
 
 #define HTT_TLV_HDR_LEN 4
 
-#define ARRAY_TO_STRING(out, arr, len)							\
-	do {										\
-		int index = 0; u8 i;							\
-		for (i = 0; i < len; i++) {						\
-			index += scnprintf(out + index, HTT_MAX_STRING_LEN - index,	\
-					  " %u:%u,", i, arr[i]);			\
-			if (index < 0 || index >= HTT_MAX_STRING_LEN)			\
-				break;							\
-		}									\
-	} while (0)
+#define ARRAY_TO_BUF(out, buflen, arr, len)                                    \
+        do {                                                                   \
+                int index = 0; u8 i;                                           \
+                for (i = 0; i < len; i++) {                                    \
+                        index += scnprintf((out + buflen) + index,             \
+                                (ATH11K_HTT_STATS_BUF_SIZE - buflen) - index,  \
+                                          " %u:%u,", i, arr[i]);               \
+                }                                                              \
+                buflen += index;                                               \
+        } while (0)
 
 static inline void htt_print_stats_string_tlv(const void *tag_buf,
 					      u16 tag_len,
@@ -38,22 +37,18 @@ static inline void htt_print_stats_strin
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u8  i;
-	u16 index = 0;
-	char data[HTT_MAX_STRING_LEN] = {0};
 
 	tag_len = tag_len >> 2;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_STRING_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_STRING_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "data = ");
 
 	for (i = 0; i < tag_len; i++) {
-		index += scnprintf(&data[index],
-				HTT_MAX_STRING_LEN - index,
-				"%.*s", 4, (char *)&(htt_stats_buf->data[i]));
-		if (index >= HTT_MAX_STRING_LEN)
-			break;
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "%.*s", 4,
+				   (char *)&(htt_stats_buf->data[i]));
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "data = %s\n", data);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -71,106 +66,106 @@ static inline void htt_print_tx_pdev_sta
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_CMN_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_queued = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_queued = %u\n",
 			   htt_stats_buf->hw_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_reaped = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_reaped = %u\n",
 			   htt_stats_buf->hw_reaped);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun = %u\n",
 			   htt_stats_buf->underrun);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_paused = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_paused = %u\n",
 			   htt_stats_buf->hw_paused);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_flush = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_flush = %u\n",
 			   htt_stats_buf->hw_flush);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_filt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_filt = %u\n",
 			   htt_stats_buf->hw_filt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort = %u\n",
 			   htt_stats_buf->tx_abort);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_requeued = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_requeued = %u\n",
 			   htt_stats_buf->mpdu_requed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_xretry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_xretry = %u\n",
 			   htt_stats_buf->tx_xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "data_rc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "data_rc = %u\n",
 			   htt_stats_buf->data_rc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_dropped_xretry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_dropped_xretry = %u\n",
 			   htt_stats_buf->mpdu_dropped_xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "illegal_rate_phy_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "illegal_rate_phy_err = %u\n",
 			   htt_stats_buf->illgl_rate_phy_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cont_xretry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cont_xretry = %u\n",
 			   htt_stats_buf->cont_xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_timeout = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_timeout = %u\n",
 			   htt_stats_buf->tx_timeout);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_resets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_resets = %u\n",
 			   htt_stats_buf->pdev_resets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_underrun = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_underrun = %u\n",
 			   htt_stats_buf->phy_underrun);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txop_ovf = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "txop_ovf = %u\n",
 			   htt_stats_buf->txop_ovf);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_posted = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_posted = %u\n",
 			   htt_stats_buf->seq_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_failed_queueing = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_failed_queueing = %u\n",
 			   htt_stats_buf->seq_failed_queueing);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_completed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_completed = %u\n",
 			   htt_stats_buf->seq_completed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_restarted = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_restarted = %u\n",
 			   htt_stats_buf->seq_restarted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_seq_posted = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_seq_posted = %u\n",
 			   htt_stats_buf->mu_seq_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_switch_hw_paused = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_switch_hw_paused = %u\n",
 			   htt_stats_buf->seq_switch_hw_paused);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "next_seq_posted_dsr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "next_seq_posted_dsr = %u\n",
 			   htt_stats_buf->next_seq_posted_dsr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_posted_isr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_posted_isr = %u\n",
 			   htt_stats_buf->seq_posted_isr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_ctrl_cached = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_ctrl_cached = %u\n",
 			   htt_stats_buf->seq_ctrl_cached);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_count_tqm = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_count_tqm = %u\n",
 			   htt_stats_buf->mpdu_count_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_count_tqm = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_count_tqm = %u\n",
 			   htt_stats_buf->msdu_count_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_removed_tqm = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_removed_tqm = %u\n",
 			   htt_stats_buf->mpdu_removed_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_removed_tqm = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_removed_tqm = %u\n",
 			   htt_stats_buf->msdu_removed_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_sw_flush = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_sw_flush = %u\n",
 			   htt_stats_buf->mpdus_sw_flush);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_hw_filter = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
 			   htt_stats_buf->mpdus_hw_filter);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_truncated = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_truncated = %u\n",
 			   htt_stats_buf->mpdus_truncated);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_ack_failed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_ack_failed = %u\n",
 			   htt_stats_buf->mpdus_ack_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_expired = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_expired = %u\n",
 			   htt_stats_buf->mpdus_expired);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_seq_hw_retry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_seq_hw_retry = %u\n",
 			   htt_stats_buf->mpdus_seq_hw_retry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
 			   htt_stats_buf->ack_tlv_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "coex_abort_mpdu_cnt_valid = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "coex_abort_mpdu_cnt_valid = %u\n",
 			   htt_stats_buf->coex_abort_mpdu_cnt_valid);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "coex_abort_mpdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "coex_abort_mpdu_cnt = %u\n",
 			   htt_stats_buf->coex_abort_mpdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_total_ppdus_tried_ota = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_total_ppdus_tried_ota = %u\n",
 			   htt_stats_buf->num_total_ppdus_tried_ota);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_tried_ota = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_tried_ota = %u\n",
 			   htt_stats_buf->num_data_ppdus_tried_ota);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_ctrl_mgmt_enqued = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_ctrl_mgmt_enqued = %u\n",
 			   htt_stats_buf->local_ctrl_mgmt_enqued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_ctrl_mgmt_freed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_ctrl_mgmt_freed = %u\n",
 			   htt_stats_buf->local_ctrl_mgmt_freed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_data_enqued = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_data_enqued = %u\n",
 			   htt_stats_buf->local_data_enqued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_data_freed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_data_freed = %u\n",
 			   htt_stats_buf->local_data_freed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_tried = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_tried = %u\n",
 			   htt_stats_buf->mpdu_tried);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "isr_wait_seq_posted = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "isr_wait_seq_posted = %u\n",
 			   htt_stats_buf->isr_wait_seq_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_active_dur_us_low = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_active_dur_us_low = %u\n",
 			   htt_stats_buf->tx_active_dur_us_low);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_active_dur_us_high = %u\n",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_active_dur_us_high = %u\n\n",
 			   htt_stats_buf->tx_active_dur_us_high);
 
 	if (len >= buf_len)
@@ -190,13 +185,13 @@ htt_print_tx_pdev_stats_urrn_tlv_v(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char urrn_stats[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_URRN_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_URRN_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_URRN_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "urrn_stats = ");
 
-	ARRAY_TO_STRING(urrn_stats, htt_stats_buf->urrn_stats, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "urrn_stats = %s\n", urrn_stats);
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->urrn_stats, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -215,13 +210,13 @@ htt_print_tx_pdev_stats_flush_tlv_v(cons
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char flush_errs[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_FLUSH_REASON_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_FLUSH_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_FLUSH_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_errs = ");
 
-	ARRAY_TO_STRING(flush_errs, htt_stats_buf->flush_errs, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_errs = %s\n", flush_errs);
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->flush_errs, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -240,14 +235,13 @@ htt_print_tx_pdev_stats_sifs_tlv_v(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char sifs_status[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_SIFS_BURST_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_SIFS_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_SIFS_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sifs_status = ");
 
-	ARRAY_TO_STRING(sifs_status, htt_stats_buf->sifs_status, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sifs_status = %s\n",
-			   sifs_status);
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->sifs_status, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -266,13 +260,13 @@ htt_print_tx_pdev_stats_phy_err_tlv_v(co
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char phy_errs[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_PHY_ERR_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_PHY_ERR_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_PHY_ERR_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_errs = ");
 
-	ARRAY_TO_STRING(phy_errs, htt_stats_buf->phy_errs, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_errs = %s\n", phy_errs);
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->phy_errs, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -291,15 +285,14 @@ htt_print_tx_pdev_stats_sifs_hist_tlv_v(
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char sifs_hist_status[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_SIFS_BURST_HIST_STATS);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:");
+			   "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sifs_hist_status = ");
 
-	ARRAY_TO_STRING(sifs_hist_status, htt_stats_buf->sifs_hist_status, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sifs_hist_status = %s\n",
-			   sifs_hist_status);
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->sifs_hist_status, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -319,18 +312,18 @@ htt_print_tx_pdev_stats_tx_ppdu_stats_tl
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_TX_PPDU_STATS_TLV_V:");
+			   "HTT_TX_PDEV_STATS_TX_PPDU_STATS_TLV_V:\n");
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_legacy_su = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_legacy_su = %u\n",
 			   htt_stats_buf->num_data_ppdus_legacy_su);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ac_su = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ac_su = %u\n",
 			   htt_stats_buf->num_data_ppdus_ac_su);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ax_su = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ax_su = %u\n",
 			   htt_stats_buf->num_data_ppdus_ax_su);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ac_su_txbf = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ac_su_txbf = %u\n",
 			   htt_stats_buf->num_data_ppdus_ac_su_txbf);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ax_su_txbf = %u\n",
@@ -353,25 +346,16 @@ htt_print_tx_pdev_stats_tried_mpdu_cnt_h
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char tried_mpdu_cnt_hist[HTT_MAX_STRING_LEN] = {0};
 	u32  num_elements = ((tag_len - sizeof(htt_stats_buf->hist_bin_size)) >> 2);
-	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_TRIED_MPDU_CNT_HIST_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u",
+			   "HTT_TX_PDEV_STATS_TRIED_MPDU_CNT_HIST_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u\n",
 			   htt_stats_buf->hist_bin_size);
 
-	if (required_buffer_size < HTT_MAX_STRING_LEN) {
-		ARRAY_TO_STRING(tried_mpdu_cnt_hist,
-				htt_stats_buf->tried_mpdu_cnt_hist,
-				num_elements);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "tried_mpdu_cnt_hist = %s\n",
-				   tried_mpdu_cnt_hist);
-	} else {
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "INSUFFICIENT PRINT BUFFER\n");
-	}
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tried_mpdu_cnt_hist = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tried_mpdu_cnt_hist, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -390,11 +374,11 @@ static inline void htt_print_hw_stats_in
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	char hw_intr_name[HTT_STATS_MAX_HW_INTR_NAME_LEN + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_INTR_MISC_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_INTR_MISC_TLV:\n");
 	memcpy(hw_intr_name, &(htt_stats_buf->hw_intr_name[0]),
 	       HTT_STATS_MAX_HW_INTR_NAME_LEN);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_intr_name = %s ", hw_intr_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mask = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_intr_name = %s \n", hw_intr_name);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mask = %u\n",
 			   htt_stats_buf->mask);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "count = %u\n",
 			   htt_stats_buf->count);
@@ -417,12 +401,12 @@ htt_print_hw_stats_wd_timeout_tlv(const
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	char hw_module_name[HTT_STATS_MAX_HW_MODULE_NAME_LEN + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_WD_TIMEOUT_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_WD_TIMEOUT_TLV:\n");
 	memcpy(hw_module_name, &(htt_stats_buf->hw_module_name[0]),
 	       HTT_STATS_MAX_HW_MODULE_NAME_LEN);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_module_name = %s ",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_module_name = %s \n",
 			   hw_module_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "count = %u\n",
 			   htt_stats_buf->count);
 
 	if (len >= buf_len)
@@ -441,26 +425,26 @@ static inline void htt_print_hw_stats_pd
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_PDEV_ERRS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_PDEV_ERRS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort = %u\n",
 			   htt_stats_buf->tx_abort);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort_fail_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort_fail_count = %u\n",
 			   htt_stats_buf->tx_abort_fail_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_abort = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_abort = %u\n",
 			   htt_stats_buf->rx_abort);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_abort_fail_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_abort_fail_count = %u\n",
 			   htt_stats_buf->rx_abort_fail_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "warm_reset = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "warm_reset = %u\n",
 			   htt_stats_buf->warm_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cold_reset = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cold_reset = %u\n",
 			   htt_stats_buf->cold_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_flush = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_flush = %u\n",
 			   htt_stats_buf->tx_flush);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_glb_reset = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_glb_reset = %u\n",
 			   htt_stats_buf->tx_glb_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_txq_reset = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_txq_reset = %u\n",
 			   htt_stats_buf->tx_txq_reset);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_timeout_reset = %u\n",
 			   htt_stats_buf->rx_timeout_reset);
@@ -481,32 +465,32 @@ static inline void htt_print_msdu_flow_s
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_update_timestamp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_update_timestamp = %u\n",
 			   htt_stats_buf->last_update_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_add_timestamp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_add_timestamp = %u\n",
 			   htt_stats_buf->last_add_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_remove_timestamp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_remove_timestamp = %u\n",
 			   htt_stats_buf->last_remove_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_processed_msdu_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_processed_msdu_count = %u\n",
 			   htt_stats_buf->total_processed_msdu_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cur_msdu_count_in_flowq = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cur_msdu_count_in_flowq = %u\n",
 			   htt_stats_buf->cur_msdu_count_in_flowq);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_flow_no = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_flow_no = %u\n",
 			   htt_stats_buf->tx_flow_no__tid_num__drop_rule & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u\n",
 			   (htt_stats_buf->tx_flow_no__tid_num__drop_rule & 0xF0000) >>
 			   16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "drop_rule = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "drop_rule = %u\n",
 			   (htt_stats_buf->tx_flow_no__tid_num__drop_rule & 0x100000) >>
 			   20);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_enqueue_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_enqueue_count = %u\n",
 			   htt_stats_buf->last_cycle_enqueue_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_dequeue_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_dequeue_count = %u\n",
 			   htt_stats_buf->last_cycle_dequeue_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_drop_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_drop_count = %u\n",
 			   htt_stats_buf->last_cycle_drop_count);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_drop_th = %u\n",
 			   htt_stats_buf->current_drop_th);
@@ -528,35 +512,35 @@ static inline void htt_print_tx_tid_stat
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	char tid_name[MAX_HTT_TID_NAME + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TID_STATS_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TID_STATS_TLV:\n");
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s ", tid_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s \n", tid_name);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id__tid_num & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u\n",
 			   (htt_stats_buf->sw_peer_id__tid_num & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sched_pending = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sched_pending = %u\n",
 			   htt_stats_buf->num_sched_pending__num_ppdu_in_hwq & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ppdu_in_hwq = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ppdu_in_hwq = %u\n",
 			   (htt_stats_buf->num_sched_pending__num_ppdu_in_hwq &
 			   0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_flags = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_flags = 0x%x\n",
 			   htt_stats_buf->tid_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_queued = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_queued = %u\n",
 			   htt_stats_buf->hw_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_reaped = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_reaped = %u\n",
 			   htt_stats_buf->hw_reaped);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_hw_filter = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
 			   htt_stats_buf->mpdus_hw_filter);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_bytes = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_bytes = %u\n",
 			   htt_stats_buf->qdepth_bytes);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_msdu = %u\n",
 			   htt_stats_buf->qdepth_num_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_mpdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_mpdu = %u\n",
 			   htt_stats_buf->qdepth_num_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_scheduled_tsmp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_scheduled_tsmp = %u\n",
 			   htt_stats_buf->last_scheduled_tsmp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_module_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_module_id = %u\n",
 			   htt_stats_buf->pause_module_id);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_module_id = %u\n",
 			   htt_stats_buf->block_module_id);
@@ -578,39 +562,39 @@ static inline void htt_print_tx_tid_stat
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	char tid_name[MAX_HTT_TID_NAME + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TID_STATS_V1_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TID_STATS_V1_TLV:\n");
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s ", tid_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s \n", tid_name);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id__tid_num & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u\n",
 			   (htt_stats_buf->sw_peer_id__tid_num & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sched_pending = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sched_pending = %u\n",
 			   htt_stats_buf->num_sched_pending__num_ppdu_in_hwq & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ppdu_in_hwq = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ppdu_in_hwq = %u\n",
 			   (htt_stats_buf->num_sched_pending__num_ppdu_in_hwq &
 			   0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_flags = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_flags = 0x%x\n",
 			   htt_stats_buf->tid_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_qdepth_bytes = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_qdepth_bytes = %u\n",
 			   htt_stats_buf->max_qdepth_bytes);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_qdepth_n_msdus = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_qdepth_n_msdus = %u\n",
 			   htt_stats_buf->max_qdepth_n_msdus);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rsvd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rsvd = %u\n",
 			   htt_stats_buf->rsvd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_bytes = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_bytes = %u\n",
 			   htt_stats_buf->qdepth_bytes);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_msdu = %u\n",
 			   htt_stats_buf->qdepth_num_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_mpdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_mpdu = %u\n",
 			   htt_stats_buf->qdepth_num_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_scheduled_tsmp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_scheduled_tsmp = %u\n",
 			   htt_stats_buf->last_scheduled_tsmp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_module_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_module_id = %u\n",
 			   htt_stats_buf->pause_module_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_module_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_module_id = %u\n",
 			   htt_stats_buf->block_module_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "allow_n_flags = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "allow_n_flags = 0x%x\n",
 			   htt_stats_buf->allow_n_flags);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "sendn_frms_allowed = %u\n",
 			   htt_stats_buf->sendn_frms_allowed);
@@ -632,18 +616,18 @@ static inline void htt_print_rx_tid_stat
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	char tid_name[MAX_HTT_TID_NAME + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_TID_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_TID_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id__tid_num & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u\n",
 			   (htt_stats_buf->sw_peer_id__tid_num & 0xFFFF0000) >> 16);
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s ", tid_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_in_reorder = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s \n", tid_name);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_in_reorder = %u\n",
 			   htt_stats_buf->dup_in_reorder);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_past_outside_window = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_past_outside_window = %u\n",
 			   htt_stats_buf->dup_past_outside_window);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_past_within_window = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_past_within_window = %u\n",
 			   htt_stats_buf->dup_past_within_window);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "rxdesc_err_decrypt = %u\n",
 			   htt_stats_buf->rxdesc_err_decrypt);
@@ -663,15 +647,12 @@ static inline void htt_print_counter_tlv
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char counter_name[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_COUNTER_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_COUNTER_TLV:\n");
 
-	ARRAY_TO_STRING(counter_name,
-			htt_stats_buf->counter_name,
-			HTT_MAX_COUNTER_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "counter_name = %s ", counter_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "count = %u\n",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "counter_name = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->counter_name, HTT_MAX_COUNTER_NAME);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ncount = %u\n",
 			   htt_stats_buf->count);
 
 	if (len >= buf_len)
@@ -690,32 +671,32 @@ static inline void htt_print_peer_stats_
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PEER_STATS_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ppdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PEER_STATS_CMN_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ppdu_cnt = %u\n",
 			   htt_stats_buf->ppdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt = %u\n",
 			   htt_stats_buf->mpdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_cnt = %u\n",
 			   htt_stats_buf->msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_bitmap = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_bitmap = %u\n",
 			   htt_stats_buf->pause_bitmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_bitmap = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_bitmap = %u\n",
 			   htt_stats_buf->block_bitmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_rssi = %d",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_rssi = %d\n",
 			   htt_stats_buf->rssi);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueued_count = %llu",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueued_count = %llu\n",
 			   htt_stats_buf->peer_enqueued_count_low |
 			   ((u64)htt_stats_buf->peer_enqueued_count_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dequeued_count = %llu",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dequeued_count = %llu\n",
 			   htt_stats_buf->peer_dequeued_count_low |
 			   ((u64)htt_stats_buf->peer_dequeued_count_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dropped_count = %llu",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dropped_count = %llu\n",
 			   htt_stats_buf->peer_dropped_count_low |
 			   ((u64)htt_stats_buf->peer_dropped_count_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "transmitted_ppdu_bytes = %llu",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "transmitted_ppdu_bytes = %llu\n",
 			   htt_stats_buf->ppdu_transmitted_bytes_low |
 			   ((u64)htt_stats_buf->ppdu_transmitted_bytes_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ttl_removed_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ttl_removed_count = %u\n",
 			   htt_stats_buf->peer_ttl_removed_count);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "inactive_time = %u\n",
 			   htt_stats_buf->inactive_time);
@@ -736,26 +717,26 @@ static inline void htt_print_peer_detail
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PEER_DETAILS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_type = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PEER_DETAILS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_type = %u\n",
 			   htt_stats_buf->peer_type);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "vdev_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "vdev_id = %u\n",
 			   htt_stats_buf->vdev_pdev_ast_idx & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u\n",
 			   (htt_stats_buf->vdev_pdev_ast_idx & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ast_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ast_idx = %u\n",
 			   (htt_stats_buf->vdev_pdev_ast_idx & 0xFFFF0000) >> 16);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "mac_addr = %02x:%02x:%02x:%02x:%02x:%02x",
+			   "mac_addr = %02x:%02x:%02x:%02x:%02x:%02x\n",
 			   htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF,
 			   (htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF00) >> 8,
 			   (htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF0000) >> 16,
 			   (htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF000000) >> 24,
 			   (htt_stats_buf->mac_addr.mac_addr_h16 & 0xFF),
 			   (htt_stats_buf->mac_addr.mac_addr_h16 & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_flags = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_flags = 0x%x\n",
 			   htt_stats_buf->peer_flags);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "qpeer_flags = 0x%x\n",
 			   htt_stats_buf->qpeer_flags);
@@ -775,74 +756,53 @@ static inline void htt_print_tx_peer_rat
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char str_buf[HTT_MAX_STRING_LEN] = {0};
-	char *tx_gi[HTT_TX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
 	u8 j;
 
-	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		tx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!tx_gi[j])
-			goto fail;
-	}
-
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PEER_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PEER_RATE_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_ldpc = %u\n",
 			   htt_stats_buf->tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u\n",
 			   htt_stats_buf->rts_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_rssi = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_rssi = %u\n",
 			   htt_stats_buf->ack_rssi);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_su_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_su_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_mu_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_mu_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf,
-			htt_stats_buf->tx_nss,
-			HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf,
-			htt_stats_buf->tx_bw,
-			HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_bw = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_stbc,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_stbc = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_pream,
-			HTT_TX_PDEV_STATS_NUM_PREAMBLE_TYPES);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_pream = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_su_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_su_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_mu_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mu_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_nss,
+		     HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_bw,
+		     HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_stbc = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_stbc,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_pream = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_pream,
+		     HTT_TX_PDEV_STATS_NUM_PREAMBLE_TYPES);
 
 	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(tx_gi[j],
-				htt_stats_buf->tx_gi[j],
-				HTT_TX_PEER_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_gi[%u] = %s ",
-				j, tx_gi[j]);
-	}
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf,
-			htt_stats_buf->tx_dcm,
-			HTT_TX_PDEV_STATS_NUM_DCM_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_dcm = %s\n", str_buf);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_gi[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_gi[j],
+		             HTT_TX_PEER_STATS_NUM_MCS_COUNTERS);
+	}
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_dcm = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_dcm,
+		     HTT_TX_PDEV_STATS_NUM_DCM_COUNTERS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -850,10 +810,6 @@ static inline void htt_print_tx_peer_rat
 		buf[len] = 0;
 
 	stats_req->buf_len = len;
-
-fail:
-	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++)
-		kfree(tx_gi[j]);
 }
 
 static inline void htt_print_rx_peer_rate_stats_tlv(const void *tag_buf,
@@ -864,79 +820,57 @@ static inline void htt_print_rx_peer_rat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u8 j;
-	char *rssi_chain[HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS] = {NULL};
-	char *rx_gi[HTT_RX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
-	char str_buf[HTT_MAX_STRING_LEN] = {0};
-
-	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
-		rssi_chain[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!rssi_chain[j])
-			goto fail;
-	}
-
-	for (j = 0; j < HTT_RX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		rx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!rx_gi[j])
-			goto fail;
-	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PEER_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "nsts = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PEER_RATE_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "nsts = %u\n",
 			   htt_stats_buf->nsts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ldpc = %u\n",
 			   htt_stats_buf->rx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u\n",
 			   htt_stats_buf->rts_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_mgmt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_mgmt = %u\n",
 			   htt_stats_buf->rssi_mgmt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_data = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_data = %u\n",
 			   htt_stats_buf->rssi_data);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_comb = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_comb = %u\n",
 			   htt_stats_buf->rssi_comb);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_mcs,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_nss,
-			HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_dcm,
-			HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_dcm = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_stbc,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_stbc = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_bw,
-			HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_bw = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs,
+		     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_nss,
+		     HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_dcm = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_dcm,
+		     HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_stbc = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_stbc,
+		     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_bw,
+		     HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
-		ARRAY_TO_STRING(rssi_chain[j], htt_stats_buf->rssi_chain[j],
-				HTT_RX_PEER_STATS_NUM_BW_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_chain[%u] = %s ",
-				   j, rssi_chain[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrssi_chain[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain[j],
+			     HTT_RX_PEER_STATS_NUM_BW_COUNTERS);
 	}
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(rx_gi[j], htt_stats_buf->rx_gi[j],
-				HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_gi[%u] = %s ",
-				j, rx_gi[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_gi[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_gi[j],
+		             HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
 	}
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_pream,
-			HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_pream = %s\n", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_pream = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_pream,
+		     HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -944,13 +878,6 @@ static inline void htt_print_rx_peer_rat
 		buf[len] = 0;
 
 	stats_req->buf_len = len;
-
-fail:
-	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++)
-		kfree(rssi_chain[j]);
-
-	for (j = 0; j < HTT_RX_PEER_STATS_NUM_GI_COUNTERS; j++)
-		kfree(rx_gi[j]);
 }
 
 static inline void
@@ -962,10 +889,10 @@ htt_print_tx_hwq_mu_mimo_sch_stats_tlv(c
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_SCH_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_posted = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_SCH_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_posted = %u\n",
 			   htt_stats_buf->mu_mimo_sch_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_failed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_failed = %u\n",
 			   htt_stats_buf->mu_mimo_sch_failed);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
 			   htt_stats_buf->mu_mimo_ppdu_posted);
@@ -988,18 +915,18 @@ htt_print_tx_hwq_mu_mimo_mpdu_stats_tlv(
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_MU_MIMO_MPDU_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_queued_usr = %u",
+			   "HTT_TX_HWQ_MU_MIMO_MPDU_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_queued_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_queued_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_tried_usr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_tried_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_tried_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_failed_usr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_failed_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_failed_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_requeued_usr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_requeued_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_requeued_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_err_no_ba_usr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_err_no_ba_usr = %u\n",
 			   htt_stats_buf->mu_mimo_err_no_ba_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdu_underrun_usr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdu_underrun_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdu_underrun_usr);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_ampdu_underrun_usr = %u\n",
 			   htt_stats_buf->mu_mimo_ampdu_underrun_usr);
@@ -1021,8 +948,8 @@ htt_print_tx_hwq_mu_mimo_cmn_stats_tlv(c
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_CMN_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__hwq_id__word & 0xFF);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwq_id = %u\n",
 			   (htt_stats_buf->mac_id__hwq_id__word & 0xFF00) >> 8);
@@ -1044,48 +971,48 @@ htt_print_tx_hwq_stats_cmn_tlv(const voi
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	/* TODO: HKDBG */
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_STATS_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_STATS_CMN_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__hwq_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwq_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwq_id = %u\n",
 			   (htt_stats_buf->mac_id__hwq_id__word & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "xretry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "xretry = %u\n",
 			   htt_stats_buf->xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun_cnt = %u\n",
 			   htt_stats_buf->underrun_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cnt = %u\n",
 			   htt_stats_buf->flush_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "filt_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "filt_cnt = %u\n",
 			   htt_stats_buf->filt_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "null_mpdu_bmap = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "null_mpdu_bmap = %u\n",
 			   htt_stats_buf->null_mpdu_bmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "user_ack_failure = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "user_ack_failure = %u\n",
 			   htt_stats_buf->user_ack_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
 			   htt_stats_buf->ack_tlv_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_id_proc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_id_proc = %u\n",
 			   htt_stats_buf->sched_id_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "null_mpdu_tx_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "null_mpdu_tx_count = %u\n",
 			   htt_stats_buf->null_mpdu_tx_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_bmap_not_recvd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_bmap_not_recvd = %u\n",
 			   htt_stats_buf->mpdu_bmap_not_recvd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_bar = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_bar = %u\n",
 			   htt_stats_buf->num_bar);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts = %u\n",
 			   htt_stats_buf->rts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cts2self = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cts2self = %u\n",
 			   htt_stats_buf->cts2self);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_null = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_null = %u\n",
 			   htt_stats_buf->qos_null);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_tried_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_tried_cnt = %u\n",
 			   htt_stats_buf->mpdu_tried_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queued_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queued_cnt = %u\n",
 			   htt_stats_buf->mpdu_queued_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_ack_fail_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_ack_fail_cnt = %u\n",
 			   htt_stats_buf->mpdu_ack_fail_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_filt_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_filt_cnt = %u\n",
 			   htt_stats_buf->mpdu_filt_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "false_mpdu_ack_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "false_mpdu_ack_count = %u\n",
 			   htt_stats_buf->false_mpdu_ack_count);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "txq_timeout = %u\n",
 			   htt_stats_buf->txq_timeout);
@@ -1108,17 +1035,15 @@ htt_print_tx_hwq_difs_latency_stats_tlv_
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u16 data_len = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_DIFS_LATENCY_BINS);
-	char difs_latency_hist[HTT_MAX_STRING_LEN] = {0};
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_DIFS_LATENCY_STATS_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hist_intvl = %u",
+			   "HTT_TX_HWQ_DIFS_LATENCY_STATS_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hist_intvl = %u\n",
 			htt_stats_buf->hist_intvl);
 
-	ARRAY_TO_STRING(difs_latency_hist, htt_stats_buf->difs_latency_hist,
-			data_len);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "difs_latency_hist = %s\n",
-			difs_latency_hist);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "difs_latency_hist = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->difs_latency_hist, data_len);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1138,16 +1063,15 @@ htt_print_tx_hwq_cmd_result_stats_tlv_v(
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u16 data_len;
-	char cmd_result[HTT_MAX_STRING_LEN] = {0};
 
 	data_len = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_CMD_RESULT_STATS);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_CMD_RESULT_STATS_TLV_V:");
-
-	ARRAY_TO_STRING(cmd_result, htt_stats_buf->cmd_result, data_len);
+			   "HTT_TX_HWQ_CMD_RESULT_STATS_TLV_V:\n");
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmd_result = %s\n", cmd_result);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmd_result = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->cmd_result, data_len);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1167,15 +1091,14 @@ htt_print_tx_hwq_cmd_stall_stats_tlv_v(c
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u16 num_elems;
-	char cmd_stall_status[HTT_MAX_STRING_LEN] = {0};
 
 	num_elems = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_CMD_STALL_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_CMD_STALL_STATS_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_CMD_STALL_STATS_TLV_V:\n");
 
-	ARRAY_TO_STRING(cmd_stall_status, htt_stats_buf->cmd_stall_status, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmd_stall_status = %s\n",
-			   cmd_stall_status);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmd_stall_status = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->cmd_stall_status, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1195,15 +1118,15 @@ htt_print_tx_hwq_fes_result_stats_tlv_v(
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u16 num_elems;
-	char fes_result[HTT_MAX_STRING_LEN] = {0};
 
 	num_elems = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_FES_RESULT_STATS);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_FES_RESULT_STATS_TLV_V:");
+			   "HTT_TX_HWQ_FES_RESULT_STATS_TLV_V:\n");
 
-	ARRAY_TO_STRING(fes_result, htt_stats_buf->fes_result, num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fes_result = %s\n", fes_result);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fes_result = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->fes_result, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1222,27 +1145,18 @@ htt_print_tx_hwq_tried_mpdu_cnt_hist_tlv
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char tried_mpdu_cnt_hist[HTT_MAX_STRING_LEN] = {0};
 	u32  num_elements = ((tag_len -
 			    sizeof(htt_stats_buf->hist_bin_size)) >> 2);
-	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_TRIED_MPDU_CNT_HIST_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u",
+			   "HTT_TX_HWQ_TRIED_MPDU_CNT_HIST_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u\n",
 			   htt_stats_buf->hist_bin_size);
 
-	if (required_buffer_size < HTT_MAX_STRING_LEN) {
-		ARRAY_TO_STRING(tried_mpdu_cnt_hist,
-				htt_stats_buf->tried_mpdu_cnt_hist,
-				num_elements);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "tried_mpdu_cnt_hist = %s\n",
-				   tried_mpdu_cnt_hist);
-	} else {
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "INSUFFICIENT PRINT BUFFER ");
-	}
+	len += HTT_DBG_OUT(buf + len, buf_len - len,
+				   "tried_mpdu_cnt_hist = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tried_mpdu_cnt_hist, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1261,23 +1175,14 @@ htt_print_tx_hwq_txop_used_cnt_hist_tlv_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char txop_used_cnt_hist[HTT_MAX_STRING_LEN] = {0};
 	u32 num_elements = tag_len >> 2;
-	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_TXOP_USED_CNT_HIST_TLV_V:");
+			   "HTT_TX_HWQ_TXOP_USED_CNT_HIST_TLV_V:\n");
 
-	if (required_buffer_size < HTT_MAX_STRING_LEN) {
-		ARRAY_TO_STRING(txop_used_cnt_hist,
-				htt_stats_buf->txop_used_cnt_hist,
-				num_elements);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "txop_used_cnt_hist = %s\n",
-				   txop_used_cnt_hist);
-	} else {
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "INSUFFICIENT PRINT BUFFER ");
-	}
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "txop_used_cnt_hist = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->txop_used_cnt_hist, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
 	else
@@ -1303,28 +1208,28 @@ static inline void htt_print_tx_sounding
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
 				   "\nHTT_TX_AC_SOUNDING_STATS_TLV:\n");
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u ",
+				   "ac_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+				   "ac_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+				   "ac_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+				   "ac_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
@@ -1333,7 +1238,7 @@ static inline void htt_print_tx_sounding
 
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++) {
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u ",
+					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
 					   i,
 					   htt_stats_buf->sounding[0],
 					   htt_stats_buf->sounding[1],
@@ -1344,28 +1249,28 @@ static inline void htt_print_tx_sounding
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
 				   "\nHTT_TX_AX_SOUNDING_STATS_TLV:\n");
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u ",
+				   "ax_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+				   "ax_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+				   "ax_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+				   "ax_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
@@ -1374,7 +1279,7 @@ static inline void htt_print_tx_sounding
 
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++) {
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u ",
+					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
 					   i,
 					   htt_stats_buf->sounding[0],
 					   htt_stats_buf->sounding[1],
@@ -1400,28 +1305,28 @@ htt_print_tx_selfgen_cmn_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_CMN_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "su_bar = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "su_bar = %u\n",
 			   htt_stats_buf->su_bar);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts = %u\n",
 			   htt_stats_buf->rts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cts2self = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cts2self = %u\n",
 			   htt_stats_buf->cts2self);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_null = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_null = %u\n",
 			   htt_stats_buf->qos_null);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_1 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_1 = %u\n",
 			   htt_stats_buf->delayed_bar_1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_2 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_2 = %u\n",
 			   htt_stats_buf->delayed_bar_2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_3 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_3 = %u\n",
 			   htt_stats_buf->delayed_bar_3);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_4 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_4 = %u\n",
 			   htt_stats_buf->delayed_bar_4);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_5 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_5 = %u\n",
 			   htt_stats_buf->delayed_bar_5);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_6 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_6 = %u\n",
 			   htt_stats_buf->delayed_bar_6);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_7 = %u\n",
 			   htt_stats_buf->delayed_bar_7);
@@ -1443,18 +1348,18 @@ htt_print_tx_selfgen_ac_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndpa = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndpa = %u\n",
 			   htt_stats_buf->ac_su_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndp = %u\n",
 			   htt_stats_buf->ac_su_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndpa = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndpa = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndp = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1 = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2 = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_2);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3 = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_3);
@@ -1476,34 +1381,34 @@ htt_print_tx_selfgen_ax_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndpa = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndpa = %u\n",
 			   htt_stats_buf->ax_su_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndp = %u\n",
 			   htt_stats_buf->ax_su_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndpa = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndpa = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndp = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_1 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_1 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_2 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_2 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_3 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_3 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_3);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_4 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_4 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_4);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_5 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_5 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_5);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_6 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_6 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_6);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_7 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_7 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_7);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_basic_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_basic_trigger = %u\n",
 			   htt_stats_buf->ax_basic_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_bsr_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_bsr_trigger = %u\n",
 			   htt_stats_buf->ax_bsr_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_bar_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_bar_trigger = %u\n",
 			   htt_stats_buf->ax_mu_bar_trigger);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_rts_trigger = %u\n",
 			   htt_stats_buf->ax_mu_rts_trigger);
@@ -1525,18 +1430,18 @@ htt_print_tx_selfgen_ac_err_stats_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_ERR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndp_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_ERR_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndp_err = %u\n",
 			   htt_stats_buf->ac_su_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndpa_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndpa_err = %u\n",
 			   htt_stats_buf->ac_su_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndpa_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndpa_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndp_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndp_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp1_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp1_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brp1_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp2_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp2_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brp2_err);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp3_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brp3_err);
@@ -1558,34 +1463,34 @@ htt_print_tx_selfgen_ax_err_stats_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_ERR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndp_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_ERR_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndp_err = %u\n",
 			   htt_stats_buf->ax_su_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndpa_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndpa_err = %u\n",
 			   htt_stats_buf->ax_su_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndpa_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndpa_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndp_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndp_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp1_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp1_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp1_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp2_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp2_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp2_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp3_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp3_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp3_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp4_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp4_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp4_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp5_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp5_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp5_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp6_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp6_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp6_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp7_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp7_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp7_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_basic_trigger_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_basic_trigger_err = %u\n",
 			   htt_stats_buf->ax_basic_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_bsr_trigger_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_bsr_trigger_err = %u\n",
 			   htt_stats_buf->ax_bsr_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_bar_trigger_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_bar_trigger_err = %u\n",
 			   htt_stats_buf->ax_mu_bar_trigger_err);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_rts_trigger_err = %u\n",
 			   htt_stats_buf->ax_mu_rts_trigger_err);
@@ -1609,33 +1514,33 @@ htt_print_tx_pdev_mu_mimo_sch_stats_tlv(
 	u8 i;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_posted = %u",
+			   "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_posted = %u\n",
 			   htt_stats_buf->mu_mimo_sch_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_failed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_failed = %u\n",
 			   htt_stats_buf->mu_mimo_sch_failed);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
 			   htt_stats_buf->mu_mimo_ppdu_posted);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "11ac MU_MIMO SCH STATS:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "11ac MU_MIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++)
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_mu_mimo_sch_nusers_%u = %u",
+				   "ac_mu_mimo_sch_nusers_%u = %u\n",
 				   i, htt_stats_buf->ac_mu_mimo_sch_nusers[i]);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n11ax MU_MIMO SCH STATS:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n11ax MU_MIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_mu_mimo_sch_nusers_%u = %u",
+				   "ax_mu_mimo_sch_nusers_%u = %u\n",
 				   i, htt_stats_buf->ax_mu_mimo_sch_nusers[i]);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n11ax OFDMA SCH STATS:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n11ax OFDMA SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS; i++)
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_ofdma_sch_nusers_%u = %u",
+				   "ax_ofdma_sch_nusers_%u = %u\n",
 				   i, htt_stats_buf->ax_ofdma_sch_nusers[i]);
 
 	if (len >= buf_len)
@@ -1663,27 +1568,27 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS) {
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_queued_usr_%u = %u",
+					   "ac_mu_mimo_mpdus_queued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_queued_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_tried_usr_%u = %u",
+					   "ac_mu_mimo_mpdus_tried_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_tried_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_failed_usr_%u = %u",
+					   "ac_mu_mimo_mpdus_failed_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_failed_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_requeued_usr_%u = %u",
+					   "ac_mu_mimo_mpdus_requeued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_requeued_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_err_no_ba_usr_%u = %u",
+					   "ac_mu_mimo_err_no_ba_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->err_no_ba_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdu_underrun_usr_%u = %u",
+					   "ac_mu_mimo_mpdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdu_underrun_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
@@ -1701,27 +1606,27 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS) {
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_queued_usr_%u = %u",
+					   "ax_mu_mimo_mpdus_queued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_queued_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_tried_usr_%u = %u",
+					   "ax_mu_mimo_mpdus_tried_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_tried_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_failed_usr_%u = %u",
+					   "ax_mu_mimo_mpdus_failed_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_failed_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_requeued_usr_%u = %u",
+					   "ax_mu_mimo_mpdus_requeued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_requeued_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_err_no_ba_usr_%u = %u",
+					   "ax_mu_mimo_err_no_ba_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->err_no_ba_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdu_underrun_usr_%u = %u",
+					   "ax_mu_mimo_mpdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdu_underrun_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
@@ -1738,27 +1643,27 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 
 		if (htt_stats_buf->user_index < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS) {
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_queued_usr_%u = %u",
+					   "ax_mu_ofdma_mpdus_queued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_queued_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_tried_usr_%u = %u",
+					   "ax_mu_ofdma_mpdus_tried_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_tried_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_failed_usr_%u = %u",
+					   "ax_mu_ofdma_mpdus_failed_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_failed_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_requeued_usr_%u = %u",
+					   "ax_mu_ofdma_mpdus_requeued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_requeued_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_err_no_ba_usr_%u = %u",
+					   "ax_mu_ofdma_err_no_ba_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->err_no_ba_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdu_underrun_usr_%u = %u",
+					   "ax_mu_ofdma_mpdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdu_underrun_usr);
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
@@ -1785,15 +1690,13 @@ htt_print_sched_txq_cmd_posted_tlv_v(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char sched_cmd_posted[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elements = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_SCHED_TX_MODE_MAX);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_POSTED_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_POSTED_TLV_V:\n");
 
-	ARRAY_TO_STRING(sched_cmd_posted, htt_stats_buf->sched_cmd_posted,
-			num_elements);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_posted = %s\n",
-			   sched_cmd_posted);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_posted = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->sched_cmd_posted, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1812,15 +1715,13 @@ htt_print_sched_txq_cmd_reaped_tlv_v(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char sched_cmd_reaped[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elements = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_SCHED_TX_MODE_MAX);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_REAPED_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_REAPED_TLV_V:\n");
 
-	ARRAY_TO_STRING(sched_cmd_reaped, htt_stats_buf->sched_cmd_reaped,
-			num_elements);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_reaped = %s\n",
-			   sched_cmd_reaped);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_reaped = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->sched_cmd_reaped, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1839,18 +1740,16 @@ htt_print_sched_txq_sched_order_su_tlv_v
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char sched_order_su[HTT_MAX_STRING_LEN] = {0};
 	/* each entry is u32, i.e. 4 bytes */
 	u32 sched_order_su_num_entries =
 		min_t(u32, (tag_len >> 2), HTT_TX_PDEV_NUM_SCHED_ORDER_LOG);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_SCHED_TXQ_SCHED_ORDER_SU_TLV_V:");
+			   "HTT_SCHED_TXQ_SCHED_ORDER_SU_TLV_V:\n");
 
-	ARRAY_TO_STRING(sched_order_su, htt_stats_buf->sched_order_su,
-			sched_order_su_num_entries);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_order_su = %s\n",
-			   sched_order_su);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_order_su = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->sched_order_su, sched_order_su_num_entries);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1869,17 +1768,16 @@ htt_print_sched_txq_sched_ineligibility_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char sched_ineligibility[HTT_MAX_STRING_LEN] = {0};
 	/* each entry is u32, i.e. 4 bytes */
 	u32 sched_ineligibility_num_entries = tag_len >> 2;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_SCHED_TXQ_SCHED_INELIGIBILITY_V:");
+			   "HTT_SCHED_TXQ_SCHED_INELIGIBILITY_V:\n");
 
-	ARRAY_TO_STRING(sched_ineligibility, htt_stats_buf->sched_ineligibility,
-			sched_ineligibility_num_entries);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_ineligibility = %s\n",
-			   sched_ineligibility);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_ineligibility = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->sched_ineligibility,
+		     sched_ineligibility_num_entries);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1899,48 +1797,48 @@ htt_print_tx_pdev_stats_sched_per_txq_tl
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_SCHED_PER_TXQ_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+			   "HTT_TX_PDEV_STATS_SCHED_PER_TXQ_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__txq_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txq_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "txq_id = %u\n",
 			   (htt_stats_buf->mac_id__txq_id__word & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_policy = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_policy = %u\n",
 			   htt_stats_buf->sched_policy);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "last_sched_cmd_posted_timestamp = %u",
+			   "last_sched_cmd_posted_timestamp = %u\n",
 			   htt_stats_buf->last_sched_cmd_posted_timestamp);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "last_sched_cmd_compl_timestamp = %u",
+			   "last_sched_cmd_compl_timestamp = %u\n",
 			   htt_stats_buf->last_sched_cmd_compl_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_2_tac_lwm_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_2_tac_lwm_count = %u\n",
 			   htt_stats_buf->sched_2_tac_lwm_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_2_tac_ring_full = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_2_tac_ring_full = %u\n",
 			   htt_stats_buf->sched_2_tac_ring_full);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_post_failure = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_post_failure = %u\n",
 			   htt_stats_buf->sched_cmd_post_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_active_tids = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_active_tids = %u\n",
 			   htt_stats_buf->num_active_tids);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ps_schedules = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ps_schedules = %u\n",
 			   htt_stats_buf->num_ps_schedules);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmds_pending = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmds_pending = %u\n",
 			   htt_stats_buf->sched_cmds_pending);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tid_register = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tid_register = %u\n",
 			   htt_stats_buf->num_tid_register);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tid_unregister = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tid_unregister = %u\n",
 			   htt_stats_buf->num_tid_unregister);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_qstats_queried = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_qstats_queried = %u\n",
 			   htt_stats_buf->num_qstats_queried);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qstats_update_pending = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qstats_update_pending = %u\n",
 			   htt_stats_buf->qstats_update_pending);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_qstats_query_timestamp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_qstats_query_timestamp = %u\n",
 			   htt_stats_buf->last_qstats_query_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tqm_cmdq_full = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tqm_cmdq_full = %u\n",
 			   htt_stats_buf->num_tqm_cmdq_full);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_de_sched_algo_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_de_sched_algo_trigger = %u\n",
 			   htt_stats_buf->num_de_sched_algo_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_rt_sched_algo_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_rt_sched_algo_trigger = %u\n",
 			   htt_stats_buf->num_rt_sched_algo_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tqm_sched_algo_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tqm_sched_algo_trigger = %u\n",
 			   htt_stats_buf->num_tqm_sched_algo_trigger);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_sched = %u\n",
 			   htt_stats_buf->notify_sched);
@@ -1963,8 +1861,8 @@ static inline void htt_print_stats_tx_sc
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_TX_SCHED_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_TX_SCHED_CMN_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_timestamp = %u\n",
 			   htt_stats_buf->current_timestamp);
@@ -1986,16 +1884,14 @@ htt_print_tx_tqm_gen_mpdu_stats_tlv_v(co
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char gen_mpdu_end_reason[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elements = min_t(u16, (tag_len >> 2),
 				 HTT_TX_TQM_MAX_LIST_MPDU_END_REASON);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_GEN_MPDU_STATS_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_GEN_MPDU_STATS_TLV_V:\n");
 
-	ARRAY_TO_STRING(gen_mpdu_end_reason, htt_stats_buf->gen_mpdu_end_reason,
-			num_elements);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_end_reason = %s\n",
-			   gen_mpdu_end_reason);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_end_reason = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->gen_mpdu_end_reason, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2014,16 +1910,14 @@ htt_print_tx_tqm_list_mpdu_stats_tlv_v(c
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char list_mpdu_end_reason[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_TQM_MAX_LIST_MPDU_END_REASON);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_TQM_LIST_MPDU_STATS_TLV_V:");
+			   "HTT_TX_TQM_LIST_MPDU_STATS_TLV_V:\n");
 
-	ARRAY_TO_STRING(list_mpdu_end_reason, htt_stats_buf->list_mpdu_end_reason,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_end_reason = %s\n",
-			   list_mpdu_end_reason);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_end_reason = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->list_mpdu_end_reason, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
 	else
@@ -2041,16 +1935,14 @@ htt_print_tx_tqm_list_mpdu_cnt_tlv_v(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char list_mpdu_cnt_hist[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2),
 			      HTT_TX_TQM_MAX_LIST_MPDU_CNT_HISTOGRAM_BINS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_LIST_MPDU_CNT_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_LIST_MPDU_CNT_TLV_V:\n");
 
-	ARRAY_TO_STRING(list_mpdu_cnt_hist, htt_stats_buf->list_mpdu_cnt_hist,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_cnt_hist = %s\n",
-			   list_mpdu_cnt_hist);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_cnt_hist = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->list_mpdu_cnt_hist, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2069,66 +1961,66 @@ htt_print_tx_tqm_pdev_stats_tlv_v(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_PDEV_STATS_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_PDEV_STATS_TLV_V:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_count = %u\n",
 			   htt_stats_buf->msdu_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_count = %u\n",
 			   htt_stats_buf->mpdu_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu = %u\n",
 			   htt_stats_buf->remove_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu = %u\n",
 			   htt_stats_buf->remove_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_ttl = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_ttl = %u\n",
 			   htt_stats_buf->remove_msdu_ttl);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_bar = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_bar = %u\n",
 			   htt_stats_buf->send_bar);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "bar_sync = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "bar_sync = %u\n",
 			   htt_stats_buf->bar_sync);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu = %u\n",
 			   htt_stats_buf->notify_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sync_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sync_cmd = %u\n",
 			   htt_stats_buf->sync_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "write_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "write_cmd = %u\n",
 			   htt_stats_buf->write_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_trigger = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_trigger = %u\n",
 			   htt_stats_buf->hwsch_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
 			   htt_stats_buf->ack_tlv_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_cmd = %u\n",
 			   htt_stats_buf->gen_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_list_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_list_cmd = %u\n",
 			   htt_stats_buf->gen_list_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_cmd = %u\n",
 			   htt_stats_buf->remove_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_tried_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_tried_cmd = %u\n",
 			   htt_stats_buf->remove_mpdu_tried_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u\n",
 			   htt_stats_buf->mpdu_queue_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_head_info_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_head_info_cmd = %u\n",
 			   htt_stats_buf->mpdu_head_info_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u\n",
 			   htt_stats_buf->msdu_flow_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_cmd = %u\n",
 			   htt_stats_buf->remove_msdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_ttl_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_ttl_cmd = %u\n",
 			   htt_stats_buf->remove_msdu_ttl_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cache_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cache_cmd = %u\n",
 			   htt_stats_buf->flush_cache_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_mpduq_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_mpduq_cmd = %u\n",
 			   htt_stats_buf->update_mpduq_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueue = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueue = %u\n",
 			   htt_stats_buf->enqueue);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueue_notify = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueue_notify = %u\n",
 			   htt_stats_buf->enqueue_notify);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu_at_head = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu_at_head = %u\n",
 			   htt_stats_buf->notify_mpdu_at_head);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu_state_valid = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu_state_valid = %u\n",
 			   htt_stats_buf->notify_mpdu_state_valid);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_udp_notify1 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_udp_notify1 = %u\n",
 			   htt_stats_buf->sched_udp_notify1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_udp_notify2 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_udp_notify2 = %u\n",
 			   htt_stats_buf->sched_udp_notify2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_nonudp_notify1 = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_nonudp_notify1 = %u\n",
 			   htt_stats_buf->sched_nonudp_notify1);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_nonudp_notify2 = %u\n",
 			   htt_stats_buf->sched_nonudp_notify2);
@@ -2149,20 +2041,20 @@ static inline void htt_print_tx_tqm_cmn_
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_CMN_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_cmdq_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_cmdq_id = %u\n",
 			   htt_stats_buf->max_cmdq_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_cnt_hist_intvl = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_cnt_hist_intvl = %u\n",
 			   htt_stats_buf->list_mpdu_cnt_hist_intvl);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "add_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "add_msdu = %u\n",
 			   htt_stats_buf->add_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_empty = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_empty = %u\n",
 			   htt_stats_buf->q_empty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_not_empty = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_not_empty = %u\n",
 			   htt_stats_buf->q_not_empty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "drop_notification = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "drop_notification = %u\n",
 			   htt_stats_buf->drop_notification);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "desc_threshold = %u\n",
 			   htt_stats_buf->desc_threshold);
@@ -2183,10 +2075,10 @@ static inline void htt_print_tx_tqm_erro
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_ERROR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_empty_failure = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_ERROR_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_empty_failure = %u\n",
 			   htt_stats_buf->q_empty_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_not_empty_failure = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_not_empty_failure = %u\n",
 			   htt_stats_buf->q_not_empty_failure);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "add_msdu_failure = %u\n",
 			   htt_stats_buf->add_msdu_failure);
@@ -2207,30 +2099,30 @@ static inline void htt_print_tx_tqm_cmdq
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_CMDQ_STATUS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_CMDQ_STATUS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__cmdq_id__word & 0xFF);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmdq_id = %u\n",
 			   (htt_stats_buf->mac_id__cmdq_id__word & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sync_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sync_cmd = %u\n",
 			   htt_stats_buf->sync_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "write_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "write_cmd = %u\n",
 			   htt_stats_buf->write_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_cmd = %u\n",
 			   htt_stats_buf->gen_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u\n",
 			   htt_stats_buf->mpdu_queue_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_head_info_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_head_info_cmd = %u\n",
 			   htt_stats_buf->mpdu_head_info_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u\n",
 			   htt_stats_buf->msdu_flow_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_cmd = %u\n",
 			   htt_stats_buf->remove_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_cmd = %u\n",
 			   htt_stats_buf->remove_msdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cache_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cache_cmd = %u\n",
 			   htt_stats_buf->flush_cache_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_mpduq_cmd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_mpduq_cmd = %u\n",
 			   htt_stats_buf->update_mpduq_cmd);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_msduq_cmd = %u\n",
 			   htt_stats_buf->update_msduq_cmd);
@@ -2253,16 +2145,16 @@ htt_print_tx_de_eapol_packets_stats_tlv(
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_EAPOL_PACKETS_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m1_packets = %u",
+			   "HTT_TX_DE_EAPOL_PACKETS_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "m1_packets = %u\n",
 			   htt_stats_buf->m1_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m2_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "m2_packets = %u\n",
 			   htt_stats_buf->m2_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m3_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "m3_packets = %u\n",
 			   htt_stats_buf->m3_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m4_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "m4_packets = %u\n",
 			   htt_stats_buf->m4_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "g1_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "g1_packets = %u\n",
 			   htt_stats_buf->g1_packets);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "g2_packets = %u\n",
 			   htt_stats_buf->g2_packets);
@@ -2285,30 +2177,30 @@ htt_print_tx_de_classify_failed_stats_tl
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_CLASSIFY_FAILED_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ap_bss_peer_not_found = %u",
+			   "HTT_TX_DE_CLASSIFY_FAILED_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ap_bss_peer_not_found = %u\n",
 			   htt_stats_buf->ap_bss_peer_not_found);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ap_bcast_mcast_no_peer = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ap_bcast_mcast_no_peer = %u\n",
 			   htt_stats_buf->ap_bcast_mcast_no_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sta_delete_in_progress = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sta_delete_in_progress = %u\n",
 			   htt_stats_buf->sta_delete_in_progress);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ibss_no_bss_peer = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ibss_no_bss_peer = %u\n",
 			   htt_stats_buf->ibss_no_bss_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_vdev_type = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_vdev_type = %u\n",
 			   htt_stats_buf->invalid_vdev_type);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_ast_peer_entry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_ast_peer_entry = %u\n",
 			   htt_stats_buf->invalid_ast_peer_entry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_entry_invalid = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_entry_invalid = %u\n",
 			   htt_stats_buf->peer_entry_invalid);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ethertype_not_ip = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ethertype_not_ip = %u\n",
 			   htt_stats_buf->ethertype_not_ip);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "eapol_lookup_failed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "eapol_lookup_failed = %u\n",
 			   htt_stats_buf->eapol_lookup_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qpeer_not_allow_data = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "qpeer_not_allow_data = %u\n",
 			   htt_stats_buf->qpeer_not_allow_data);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_tid_override = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_tid_override = %u\n",
 			   htt_stats_buf->fse_tid_override);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ipv6_jumbogram_zero_length = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ipv6_jumbogram_zero_length = %u\n",
 			   htt_stats_buf->ipv6_jumbogram_zero_length);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_to_non_qos_in_prog = %u\n",
 			   htt_stats_buf->qos_to_non_qos_in_prog);
@@ -2330,70 +2222,70 @@ htt_print_tx_de_classify_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_CLASSIFY_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "arp_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_CLASSIFY_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "arp_packets = %u\n",
 			   htt_stats_buf->arp_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "igmp_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "igmp_packets = %u\n",
 			   htt_stats_buf->igmp_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dhcp_packets = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dhcp_packets = %u\n",
 			   htt_stats_buf->dhcp_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_inspected = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_inspected = %u\n",
 			   htt_stats_buf->host_inspected);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_included = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_included = %u\n",
 			   htt_stats_buf->htt_included);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_mcs = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_mcs = %u\n",
 			   htt_stats_buf->htt_valid_mcs);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_nss = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_nss = %u\n",
 			   htt_stats_buf->htt_valid_nss);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_preamble_type = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_preamble_type = %u\n",
 			   htt_stats_buf->htt_valid_preamble_type);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_chainmask = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_chainmask = %u\n",
 			   htt_stats_buf->htt_valid_chainmask);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_guard_interval = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_guard_interval = %u\n",
 			   htt_stats_buf->htt_valid_guard_interval);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_retries = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_retries = %u\n",
 			   htt_stats_buf->htt_valid_retries);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_bw_info = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_bw_info = %u\n",
 			   htt_stats_buf->htt_valid_bw_info);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_power = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_power = %u\n",
 			   htt_stats_buf->htt_valid_power);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_key_flags = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_key_flags = 0x%x\n",
 			   htt_stats_buf->htt_valid_key_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_no_encryption = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_no_encryption = %u\n",
 			   htt_stats_buf->htt_valid_no_encryption);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_entry_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_entry_count = %u\n",
 			   htt_stats_buf->fse_entry_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_be = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_be = %u\n",
 			   htt_stats_buf->fse_priority_be);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_high = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_high = %u\n",
 			   htt_stats_buf->fse_priority_high);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_low = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_low = %u\n",
 			   htt_stats_buf->fse_priority_low);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_be = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_be = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_be);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_over_sub = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_over_sub = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_over_sub);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_bursty = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_bursty = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_bursty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_interactive = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_interactive = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_interactive);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_periodic = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_periodic = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_periodic);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_alloc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_alloc = %u\n",
 			   htt_stats_buf->fse_hwqueue_alloc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_created = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_created = %u\n",
 			   htt_stats_buf->fse_hwqueue_created);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_send_to_host = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_send_to_host = %u\n",
 			   htt_stats_buf->fse_hwqueue_send_to_host);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mcast_entry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mcast_entry = %u\n",
 			   htt_stats_buf->mcast_entry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "bcast_entry = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "bcast_entry = %u\n",
 			   htt_stats_buf->bcast_entry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_update_peer_cache = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_update_peer_cache = %u\n",
 			   htt_stats_buf->htt_update_peer_cache);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_learning_frame = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_learning_frame = %u\n",
 			   htt_stats_buf->htt_learning_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_invalid_peer = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_invalid_peer = %u\n",
 			   htt_stats_buf->fse_invalid_peer);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "mec_notify = %u\n",
 			   htt_stats_buf->mec_notify);
@@ -2416,20 +2308,20 @@ htt_print_tx_de_classify_status_stats_tl
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_CLASSIFY_STATUS_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "eok = %u",
+			   "HTT_TX_DE_CLASSIFY_STATUS_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "eok = %u\n",
 			   htt_stats_buf->eok);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "classify_done = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "classify_done = %u\n",
 			   htt_stats_buf->classify_done);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "lookup_failed = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "lookup_failed = %u\n",
 			   htt_stats_buf->lookup_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_dhcp = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_dhcp = %u\n",
 			   htt_stats_buf->send_host_dhcp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_mcast = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_mcast = %u\n",
 			   htt_stats_buf->send_host_mcast);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_unknown_dest = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_unknown_dest = %u\n",
 			   htt_stats_buf->send_host_unknown_dest);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host = %u\n",
 			   htt_stats_buf->send_host);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "status_invalid = %u\n",
 			   htt_stats_buf->status_invalid);
@@ -2452,10 +2344,10 @@ htt_print_tx_de_enqueue_packets_stats_tl
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_ENQUEUE_PACKETS_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueued_pkts = %u",
+			   "HTT_TX_DE_ENQUEUE_PACKETS_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueued_pkts = %u\n",
 			htt_stats_buf->enqueued_pkts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "to_tqm = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "to_tqm = %u\n",
 			htt_stats_buf->to_tqm);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "to_tqm_bypass = %u\n",
 			htt_stats_buf->to_tqm_bypass);
@@ -2478,10 +2370,10 @@ htt_print_tx_de_enqueue_discard_stats_tl
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_ENQUEUE_DISCARD_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "discarded_pkts = %u",
+			   "HTT_TX_DE_ENQUEUE_DISCARD_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "discarded_pkts = %u\n",
 			   htt_stats_buf->discarded_pkts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_frames = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_frames = %u\n",
 			   htt_stats_buf->local_frames);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "is_ext_msdu = %u\n",
 			   htt_stats_buf->is_ext_msdu);
@@ -2502,14 +2394,14 @@ static inline void htt_print_tx_de_compl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_COMPL_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl_dummy_frame = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_COMPL_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl_dummy_frame = %u\n",
 			   htt_stats_buf->tcl_dummy_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_dummy_frame = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_dummy_frame = %u\n",
 			   htt_stats_buf->tqm_dummy_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_notify_frame = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_notify_frame = %u\n",
 			   htt_stats_buf->tqm_notify_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw2wbm_enq = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw2wbm_enq = %u\n",
 			   htt_stats_buf->fw2wbm_enq);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_bypass_frame = %u\n",
 			   htt_stats_buf->tqm_bypass_frame);
@@ -2531,24 +2423,15 @@ htt_print_tx_de_fw2wbm_ring_full_hist_tl
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char fw2wbm_ring_full_hist[HTT_MAX_STRING_LEN] = {0};
 	u16  num_elements = tag_len >> 2;
-	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_FW2WBM_RING_FULL_HIST_TLV");
+			   "HTT_TX_DE_FW2WBM_RING_FULL_HIST_TLV:\n");
 
-	if (required_buffer_size < HTT_MAX_STRING_LEN) {
-		ARRAY_TO_STRING(fw2wbm_ring_full_hist,
-				htt_stats_buf->fw2wbm_ring_full_hist,
-				num_elements);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "fw2wbm_ring_full_hist = %s\n",
-				   fw2wbm_ring_full_hist);
-	} else {
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "INSUFFICIENT PRINT BUFFER ");
-	}
+	len += HTT_DBG_OUT(buf + len, buf_len - len,
+				   "fw2wbm_ring_full_hist = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->fw2wbm_ring_full_hist, num_elements);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2566,18 +2449,18 @@ htt_print_tx_de_cmn_stats_tlv(const void
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_CMN_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl2fw_entry_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl2fw_entry_count = %u\n",
 			   htt_stats_buf->tcl2fw_entry_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "not_to_fw = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "not_to_fw = %u\n",
 			   htt_stats_buf->not_to_fw);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_pdev_vdev_peer = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_pdev_vdev_peer = %u\n",
 			   htt_stats_buf->invalid_pdev_vdev_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl_res_invalid_addrx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl_res_invalid_addrx = %u\n",
 			   htt_stats_buf->tcl_res_invalid_addrx);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm2fw_entry_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm2fw_entry_count = %u\n",
 			   htt_stats_buf->wbm2fw_entry_count);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_pdev = %u\n",
 			   htt_stats_buf->invalid_pdev);
@@ -2597,52 +2480,48 @@ static inline void htt_print_ring_if_sta
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char low_wm_hit_count[HTT_MAX_STRING_LEN] = {0};
-	char high_wm_hit_count[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RING_IF_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RING_IF_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr = %u\n",
 			   htt_stats_buf->base_addr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "elem_size = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "elem_size = %u\n",
 			   htt_stats_buf->elem_size);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_elems = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_elems = %u\n",
 			   htt_stats_buf->num_elems__prefetch_tail_idx & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prefetch_tail_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "prefetch_tail_idx = %u\n",
 			   (htt_stats_buf->num_elems__prefetch_tail_idx &
 			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "head_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "head_idx = %u\n",
 			   htt_stats_buf->head_idx__tail_idx & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tail_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tail_idx = %u\n",
 			   (htt_stats_buf->head_idx__tail_idx & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "shadow_head_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "shadow_head_idx = %u\n",
 			   htt_stats_buf->shadow_head_idx__shadow_tail_idx & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "shadow_tail_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "shadow_tail_idx = %u\n",
 			   (htt_stats_buf->shadow_head_idx__shadow_tail_idx &
 			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tail_incr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tail_incr = %u\n",
 			   htt_stats_buf->num_tail_incr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "lwm_thresh = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "lwm_thresh = %u\n",
 			   htt_stats_buf->lwm_thresh__hwm_thresh & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwm_thresh = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwm_thresh = %u\n",
 			   (htt_stats_buf->lwm_thresh__hwm_thresh & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "overrun_hit_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "overrun_hit_count = %u\n",
 			   htt_stats_buf->overrun_hit_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun_hit_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun_hit_count = %u\n",
 			   htt_stats_buf->underrun_hit_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prod_blockwait_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "prod_blockwait_count = %u\n",
 			   htt_stats_buf->prod_blockwait_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cons_blockwait_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "cons_blockwait_count = %u\n",
 			   htt_stats_buf->cons_blockwait_count);
 
-	ARRAY_TO_STRING(low_wm_hit_count, htt_stats_buf->low_wm_hit_count,
-			HTT_STATS_LOW_WM_BINS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "low_wm_hit_count = %s ",
-			   low_wm_hit_count);
-
-	ARRAY_TO_STRING(high_wm_hit_count, htt_stats_buf->high_wm_hit_count,
-			HTT_STATS_HIGH_WM_BINS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "high_wm_hit_count = %s\n",
-			   high_wm_hit_count);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "low_wm_hit_count = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->low_wm_hit_count, HTT_STATS_LOW_WM_BINS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "high_wm_hit_count = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->high_wm_hit_count, HTT_STATS_HIGH_WM_BINS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2660,8 +2539,8 @@ static inline void htt_print_ring_if_cmn
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RING_IF_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RING_IF_CMN_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
@@ -2682,16 +2561,13 @@ static inline void htt_print_sfm_client_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char dwords_used_by_user_n[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = tag_len >> 2;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CLIENT_USER_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CLIENT_USER_TLV_V:\n");
 
-	ARRAY_TO_STRING(dwords_used_by_user_n,
-			htt_stats_buf->dwords_used_by_user_n,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dwords_used_by_user_n = %s\n",
-			   dwords_used_by_user_n);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dwords_used_by_user_n = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->dwords_used_by_user_n, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2709,18 +2585,18 @@ static inline void htt_print_sfm_client_
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CLIENT_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "client_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CLIENT_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "client_id = %u\n",
 			   htt_stats_buf->client_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_min = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_min = %u\n",
 			   htt_stats_buf->buf_min);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_max = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_max = %u\n",
 			   htt_stats_buf->buf_max);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_busy = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_busy = %u\n",
 			   htt_stats_buf->buf_busy);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_alloc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_alloc = %u\n",
 			   htt_stats_buf->buf_alloc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_avail = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_avail = %u\n",
 			   htt_stats_buf->buf_avail);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_users = %u\n",
 			   htt_stats_buf->num_users);
@@ -2741,14 +2617,14 @@ static inline void htt_print_sfm_cmn_tlv
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CMN_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_total = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_total = %u\n",
 			   htt_stats_buf->buf_total);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mem_empty = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mem_empty = %u\n",
 			   htt_stats_buf->mem_empty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "deallocate_bufs = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "deallocate_bufs = %u\n",
 			   htt_stats_buf->deallocate_bufs);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
@@ -2769,38 +2645,38 @@ static inline void htt_print_sring_stats
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SRING_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SRING_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__ring_id__arena__ep & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ring_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ring_id = %u\n",
 			   (htt_stats_buf->mac_id__ring_id__arena__ep & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "arena = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "arena = %u\n",
 			   (htt_stats_buf->mac_id__ring_id__arena__ep & 0xFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ep = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ep = %u\n",
 			   (htt_stats_buf->mac_id__ring_id__arena__ep & 0x1000000) >> 24);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr_lsb = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr_lsb = 0x%x\n",
 			   htt_stats_buf->base_addr_lsb);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr_msb = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr_msb = 0x%x\n",
 			   htt_stats_buf->base_addr_msb);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ring_size = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ring_size = %u\n",
 			   htt_stats_buf->ring_size);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "elem_size = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "elem_size = %u\n",
 			   htt_stats_buf->elem_size);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_avail_words = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_avail_words = %u\n",
 			   htt_stats_buf->num_avail_words__num_valid_words & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_valid_words = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_valid_words = %u\n",
 			   (htt_stats_buf->num_avail_words__num_valid_words &
 			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "head_ptr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "head_ptr = %u\n",
 			   htt_stats_buf->head_ptr__tail_ptr & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tail_ptr = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tail_ptr = %u\n",
 			   (htt_stats_buf->head_ptr__tail_ptr & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "consumer_empty = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "consumer_empty = %u\n",
 			   htt_stats_buf->consumer_empty__producer_full & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "producer_full = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "producer_full = %u\n",
 			   (htt_stats_buf->consumer_empty__producer_full &
 			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prefetch_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "prefetch_count = %u\n",
 			   htt_stats_buf->prefetch_count__internal_tail_ptr & 0xFFFF);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "internal_tail_ptr = %u\n",
 			   (htt_stats_buf->prefetch_count__internal_tail_ptr &
@@ -2822,7 +2698,7 @@ static inline void htt_print_sring_cmn_t
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SRING_CMN_TLV:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SRING_CMN_TLV:\n");
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
 
@@ -2842,35 +2718,27 @@ static inline void htt_print_tx_pdev_rat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 	u8 j;
-	char str_buf[HTT_MAX_STRING_LEN] = {0};
-	char *tx_gi[HTT_TX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
-
-	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
-		tx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!tx_gi[j])
-			goto fail;
-	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_RATE_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_ldpc = %u\n",
 			   htt_stats_buf->tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_tx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_tx_ldpc = %u\n",
 			   htt_stats_buf->ac_mu_mimo_tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_tx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_tx_ldpc = %u\n",
 			   htt_stats_buf->ax_mu_mimo_tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_ldpc = %u\n",
 			   htt_stats_buf->ofdma_tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u\n",
 			   htt_stats_buf->rts_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_success = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_success = %u\n",
 			   htt_stats_buf->rts_success);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_rssi = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_rssi = %u\n",
 			   htt_stats_buf->ack_rssi);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u",
+			   "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u\n",
 			   htt_stats_buf->tx_legacy_cck_rate[0],
 			   htt_stats_buf->tx_legacy_cck_rate[1],
 			   htt_stats_buf->tx_legacy_cck_rate[2],
@@ -2878,7 +2746,7 @@ static inline void htt_print_tx_pdev_rat
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
 			   "Legacy OFDM Rates: 6 Mbps: %u, 9 Mbps: %u, 12 Mbps: %u, 18 Mbps: %u\n"
-			   "                   24 Mbps: %u, 36 Mbps: %u, 48 Mbps: %u, 54 Mbps: %u",
+			   "                   24 Mbps: %u, 36 Mbps: %u, 48 Mbps: %u, 54 Mbps: %u\n",
 			   htt_stats_buf->tx_legacy_ofdm_rate[0],
 			   htt_stats_buf->tx_legacy_ofdm_rate[1],
 			   htt_stats_buf->tx_legacy_ofdm_rate[2],
@@ -2888,119 +2756,100 @@ static inline void htt_print_tx_pdev_rat
 			   htt_stats_buf->tx_legacy_ofdm_rate[6],
 			   htt_stats_buf->tx_legacy_ofdm_rate[7]);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ac_mu_mimo_tx_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_tx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ax_mu_mimo_tx_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_tx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ofdma_tx_mcs,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_nss,
-			HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ac_mu_mimo_tx_nss,
-			HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_tx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ax_mu_mimo_tx_nss,
-			HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_tx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ofdma_tx_nss,
-			HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_bw,
-			HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_bw = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ac_mu_mimo_tx_bw,
-			HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_tx_bw = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ax_mu_mimo_tx_bw,
-			HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_tx_bw = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ofdma_tx_bw,
-			HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_bw = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_stbc,
-			HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_stbc = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_pream,
-			HTT_TX_PDEV_STATS_NUM_PREAMBLE_TYPES);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_pream = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nac_mu_mimo_tx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nax_mu_mimo_tx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nofdma_tx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_mcs,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_nss,
+		     HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nac_mu_mimo_tx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_nss,
+                     HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nax_mu_mimo_tx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_nss,
+		     HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nofdma_tx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_nss,
+		     HTT_TX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_bw,
+		     HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nac_mu_mimo_tx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_bw,
+		     HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nax_mu_mimo_tx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_bw,
+		     HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nofdma_tx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_bw,
+		     HTT_TX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_stbc = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_stbc,
+		     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_pream = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_pream,
+		     HTT_TX_PDEV_STATS_NUM_PREAMBLE_TYPES);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HE LTF: 1x: %u, 2x: %u, 4x: %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nHE LTF: 1x: %u, 2x: %u, 4x: %u",
 			   htt_stats_buf->tx_he_ltf[1],
 			   htt_stats_buf->tx_he_ltf[2],
 			   htt_stats_buf->tx_he_ltf[3]);
 
 	/* SU GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(tx_gi[j], htt_stats_buf->tx_gi[j],
-				HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_gi[%u] = %s ",
-				   j, tx_gi[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_gi[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_gi[j],
+			     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
 	}
 
 	/* AC MU-MIMO GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(tx_gi[j], htt_stats_buf->ac_mu_mimo_tx_gi[j],
-				HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_mu_mimo_tx_gi[%u] = %s ",
-				   j, tx_gi[j]);
+				   "\nac_mu_mimo_tx_gi[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_gi[j],
+			     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
 	}
 
 	/* AX MU-MIMO GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(tx_gi[j], htt_stats_buf->ax_mu_mimo_tx_gi[j],
-				HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_mu_mimo_tx_gi[%u] = %s ",
-				   j, tx_gi[j]);
+				   "\nax_mu_mimo_tx_gi[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_gi[j],
+		 	     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
 	}
 
 	/* DL OFDMA GI Stats */
 	for (j = 0; j < HTT_TX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(tx_gi[j], htt_stats_buf->ofdma_tx_gi[j],
-				HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_gi[%u] = %s ",
-				   j, tx_gi[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nofdma_tx_gi[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->ofdma_tx_gi[j],
+			     HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS);
 	}
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->tx_dcm,
-			HTT_TX_PDEV_STATS_NUM_DCM_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_dcm = %s\n", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntx_dcm = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_dcm, HTT_TX_PDEV_STATS_NUM_DCM_COUNTERS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3008,9 +2857,6 @@ static inline void htt_print_tx_pdev_rat
 		buf[len] = 0;
 
 	stats_req->buf_len = len;
-fail:
-	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++)
-		kfree(tx_gi[j]);
 }
 
 static inline void htt_print_rx_pdev_rate_stats_tlv(const void *tag_buf,
@@ -3020,225 +2866,150 @@ static inline void htt_print_rx_pdev_rat
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	u8 i, j;
-	u16 index = 0;
-	char *rssi_chain[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS] = {NULL};
-	char *rx_gi[HTT_RX_PDEV_STATS_NUM_GI_COUNTERS] = {NULL};
-	char str_buf[HTT_MAX_STRING_LEN] = {0};
-	char *rx_pilot_evm_db[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS] = {NULL};
-
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		rssi_chain[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!rssi_chain[j])
-			goto fail;
-	}
-
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		rx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!rx_gi[j])
-			goto fail;
-	}
-
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		rx_pilot_evm_db[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
-		if (!rx_pilot_evm_db[j])
-			goto fail;
-	}
+	u8 j;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_RATE_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "nsts = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "nsts = %u\n",
 			   htt_stats_buf->nsts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ldpc = %u\n",
 			   htt_stats_buf->rx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u\n",
 			   htt_stats_buf->rts_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_mgmt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_mgmt = %u\n",
 			   htt_stats_buf->rssi_mgmt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_data = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_data = %u\n",
 			   htt_stats_buf->rssi_data);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_comb = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_comb = %u\n",
 			   htt_stats_buf->rssi_comb);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_in_dbm = %d",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_in_dbm = %d\n",
 			   htt_stats_buf->rssi_in_dbm);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_mcs,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_mcs = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_nss,
-			HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_dcm,
-			HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_dcm = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_stbc,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_stbc = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_bw,
-			HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_bw = %s ", str_buf);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_evm_nss_count = %u",
-			htt_stats_buf->nss_count);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs, HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_nss, HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_evm_pilot_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_dcm = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_dcm, HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_stbc = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_stbc, HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_bw, HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_evm_nss_count = %u",
+			htt_stats_buf->nss_count);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_evm_pilot_count = %u",
 			htt_stats_buf->pilot_count);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		index = 0;
-
-		for (i = 0; i < HTT_RX_PDEV_STATS_RXEVM_MAX_PILOTS_PER_NSS; i++)
-			index += scnprintf(&rx_pilot_evm_db[j][index],
-					  HTT_MAX_STRING_LEN - index,
-					  " %u:%d,",
-					  i,
-					  htt_stats_buf->rx_pilot_evm_db[j][i]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "pilot_evm_dB[%u] = %s ",
-				   j, rx_pilot_evm_db[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\npilot_evm_dB[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_pilot_evm_db[j],
+			     HTT_RX_PDEV_STATS_RXEVM_MAX_PILOTS_PER_NSS);
 	}
 
-	index = 0;
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
-		index += scnprintf(&str_buf[index],
-				  HTT_MAX_STRING_LEN - index,
-				  " %u:%d,", i, htt_stats_buf->rx_pilot_evm_db_mean[i]);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pilot_evm_dB_mean = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\npilot_evm_dB_mean = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_pilot_evm_db_mean,
+		     HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		ARRAY_TO_STRING(rssi_chain[j], htt_stats_buf->rssi_chain[j],
-				HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_chain[%u] = %s ",
-				   j, rssi_chain[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrssi_chain[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain[j],
+			     HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
 	}
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(rx_gi[j], htt_stats_buf->rx_gi[j],
-				HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_gi[%u] = %s ",
-				   j, rx_gi[j]);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_gi[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_gi[j],
+			     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
 	}
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_pream,
-			HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_pream = %s", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_pream = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_pream, HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_su_ext = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_11ax_su_ext = %u",
 			   htt_stats_buf->rx_11ax_su_ext);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ac_mumimo = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_11ac_mumimo = %u",
 			   htt_stats_buf->rx_11ac_mumimo);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_mumimo = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_11ax_mumimo = %u",
 			   htt_stats_buf->rx_11ax_mumimo);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_ofdma = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_11ax_ofdma = %u",
 			   htt_stats_buf->rx_11ax_ofdma);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txbf = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\ntxbf = %u",
 			   htt_stats_buf->txbf);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_legacy_cck_rate,
-			HTT_RX_PDEV_STATS_NUM_LEGACY_CCK_STATS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_legacy_cck_rate = %s ",
-			   str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_legacy_ofdm_rate,
-			HTT_RX_PDEV_STATS_NUM_LEGACY_OFDM_STATS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_legacy_ofdm_rate = %s ",
-			   str_buf);
-
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_active_dur_us_low = %u",
+        len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_legacy_cck_rate = ");
+        ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_legacy_cck_rate,
+                     HTT_RX_PDEV_STATS_NUM_LEGACY_CCK_STATS);
+
+        len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_legacy_ofdm_rate = ");
+        ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_legacy_ofdm_rate,
+                     HTT_RX_PDEV_STATS_NUM_LEGACY_OFDM_STATS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_active_dur_us_low = %u",
 			   htt_stats_buf->rx_active_dur_us_low);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_active_dur_us_high = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_active_dur_us_high = %u",
 			htt_stats_buf->rx_active_dur_us_high);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_ul_ofdma = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_11ax_ul_ofdma = %u",
 			htt_stats_buf->rx_11ax_ul_ofdma);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ul_ofdma_rx_mcs,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_mcs = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_mcs,
+		     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(rx_gi[j], htt_stats_buf->ul_ofdma_rx_gi[j],
-				HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s ",
-				   j, rx_gi[j]);
-	}
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ul_ofdma_rx_nss,
-			HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->ul_ofdma_rx_bw,
-			HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_bw = %s ", str_buf);
-
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_stbc = %u",
-			htt_stats_buf->ul_ofdma_rx_stbc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_ldpc = %u",
-			htt_stats_buf->ul_ofdma_rx_ldpc);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_ulofdma_non_data_ppdu,
-			HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ulofdma_non_data_ppdu = %s ",
-			   str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_ulofdma_data_ppdu,
-			HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ulofdma_data_ppdu = %s ",
-			   str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_ulofdma_mpdu_ok,
-			HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ulofdma_mpdu_ok = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_ulofdma_mpdu_fail,
-			HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ulofdma_mpdu_fail = %s",
-			   str_buf);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_gi[%u] = ",j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_gi[j],
+			     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+	}
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_nss,
+		     HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_bw =  ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_bw,
+		     HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_stbc = %u",
+		           htt_stats_buf->ul_ofdma_rx_stbc);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_ldpc = %u",
+		 	   htt_stats_buf->ul_ofdma_rx_ldpc);
+
+        len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_ulofdma_non_data_ppdu = ");
+        ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_non_data_ppdu,
+                     HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
+
+        len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_ulofdma_data_ppdu = ");
+        ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_data_ppdu,
+                     HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
+
+        len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_ulofdma_mpdu_ok = ");
+        ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_mpdu_ok,
+                     HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
+
+        len += HTT_DBG_OUT(buf + len, buf_len - len, "\nrx_ulofdma_mpdu_fail = ");
+        ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_mpdu_fail,
+                     HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		index = 0;
-		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-		for (i = 0; i < HTT_RX_PDEV_MAX_OFDMA_NUM_USER; i++)
-			index += scnprintf(&str_buf[index],
-					  HTT_MAX_STRING_LEN - index,
-					  " %u:%d,",
-					  i, htt_stats_buf->rx_ul_fd_rssi[j][i]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_ul_fd_rssi: nss[%u] = %s", j, str_buf);
+			           "\nrx_ul_fd_rssi: nss[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ul_fd_rssi[j],
+			     HTT_RX_PDEV_MAX_OFDMA_NUM_USER);
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "per_chain_rssi_pkt_type = %#x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nper_chain_rssi_pkt_type = %#x",
 			   htt_stats_buf->per_chain_rssi_pkt_type);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
-		index = 0;
-		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-		for (i = 0; i < HTT_RX_PDEV_STATS_NUM_BW_COUNTERS; i++)
-			index += scnprintf(&str_buf[index],
-					  HTT_MAX_STRING_LEN - index,
-					  " %u:%d,",
-					  i,
-					  htt_stats_buf->rx_per_chain_rssi_in_dbm[j][i]);
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_per_chain_rssi_in_dbm[%u] = %s ", j, str_buf);
+				   "\nrx_per_chain_rssi_in_dbm[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_per_chain_rssi_in_dbm[j],
+			     HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
 	}
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
@@ -3248,16 +3019,6 @@ static inline void htt_print_rx_pdev_rat
 		buf[len] = 0;
 
 	stats_req->buf_len = len;
-
-fail:
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++)
-		kfree(rssi_chain[j]);
-
-	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++)
-		kfree(rx_pilot_evm_db[j]);
-
-	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; i++)
-		kfree(rx_gi[i]);
 }
 
 static inline void htt_print_rx_soc_fw_stats_tlv(const void *tag_buf,
@@ -3268,33 +3029,33 @@ static inline void htt_print_rx_soc_fw_s
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_SOC_FW_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_reo_ring_data_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_SOC_FW_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_reo_ring_data_msdu = %u\n",
 			   htt_stats_buf->fw_reo_ring_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_to_host_data_msdu_bcmc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_to_host_data_msdu_bcmc = %u\n",
 			   htt_stats_buf->fw_to_host_data_msdu_bcmc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_to_host_data_msdu_uc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_to_host_data_msdu_uc = %u\n",
 			   htt_stats_buf->fw_to_host_data_msdu_uc);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_remote_data_buf_recycle_cnt = %u",
+			   "ofld_remote_data_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->ofld_remote_data_buf_recycle_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_remote_free_buf_indication_cnt = %u",
+			   "ofld_remote_free_buf_indication_cnt = %u\n",
 			   htt_stats_buf->ofld_remote_free_buf_indication_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_buf_to_host_data_msdu_uc = %u",
+			   "ofld_buf_to_host_data_msdu_uc = %u\n",
 			   htt_stats_buf->ofld_buf_to_host_data_msdu_uc);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "reo_fw_ring_to_host_data_msdu_uc = %u",
+			   "reo_fw_ring_to_host_data_msdu_uc = %u\n",
 			   htt_stats_buf->reo_fw_ring_to_host_data_msdu_uc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_sw_ring_reap = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_sw_ring_reap = %u\n",
 			   htt_stats_buf->wbm_sw_ring_reap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_forward_to_host_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_forward_to_host_cnt = %u\n",
 			   htt_stats_buf->wbm_forward_to_host_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_target_recycle_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_target_recycle_cnt = %u\n",
 			   htt_stats_buf->wbm_target_recycle_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "target_refill_ring_recycle_cnt = %u",
+			   "target_refill_ring_recycle_cnt = %u\n",
 			   htt_stats_buf->target_refill_ring_recycle_cnt);
 
 	if (len >= buf_len)
@@ -3314,17 +3075,14 @@ htt_print_rx_soc_fw_refill_ring_empty_tl
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char refill_ring_empty_cnt[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_REFILL_MAX_RING);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_EMPTY_TLV_V:");
+			   "HTT_RX_SOC_FW_REFILL_RING_EMPTY_TLV_V:\n");
 
-	ARRAY_TO_STRING(refill_ring_empty_cnt,
-			htt_stats_buf->refill_ring_empty_cnt,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "refill_ring_empty_cnt = %s\n",
-			   refill_ring_empty_cnt);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "refill_ring_empty_cnt = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->refill_ring_empty_cnt, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3344,17 +3102,14 @@ htt_print_rx_soc_fw_refill_ring_num_rxdm
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char rxdma_err_cnt[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_RXDMA_MAX_ERR_CODE);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_RXDMA_ERR_TLV_V:");
+			   "HTT_RX_SOC_FW_REFILL_RING_NUM_RXDMA_ERR_TLV_V:\n");
 
-	ARRAY_TO_STRING(rxdma_err_cnt,
-			htt_stats_buf->rxdma_err,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rxdma_err = %s\n",
-			   rxdma_err_cnt);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rxdma_err = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->rxdma_err, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3373,17 +3128,14 @@ htt_print_rx_soc_fw_refill_ring_num_reo_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char reo_err_cnt[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_REO_MAX_ERR_CODE);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REO_ERR_TLV_V:");
+			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REO_ERR_TLV_V:\n");
 
-	ARRAY_TO_STRING(reo_err_cnt,
-			htt_stats_buf->reo_err,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "reo_err = %s\n",
-			   reo_err_cnt);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "reo_err = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->reo_err, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3402,24 +3154,24 @@ htt_print_rx_reo_debug_stats_tlv_v(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_REO_RESOURCE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sample_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_REO_RESOURCE_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sample_id = %u\n",
 			   htt_stats_buf->sample_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_max = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_max = %u\n",
 			   htt_stats_buf->total_max);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_avg = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_avg = %u\n",
 			   htt_stats_buf->total_avg);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_sample = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_sample = %u\n",
 			   htt_stats_buf->total_sample);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "non_zeros_avg = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "non_zeros_avg = %u\n",
 			   htt_stats_buf->non_zeros_avg);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "non_zeros_sample = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "non_zeros_sample = %u\n",
 			   htt_stats_buf->non_zeros_sample);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_max = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_max = %u\n",
 			   htt_stats_buf->last_non_zeros_max);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_min %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_min %u\n",
 			   htt_stats_buf->last_non_zeros_min);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_avg %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_avg %u\n",
 			   htt_stats_buf->last_non_zeros_avg);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_sample %u\n",
 			   htt_stats_buf->last_non_zeros_sample);
@@ -3441,17 +3193,14 @@ htt_print_rx_soc_fw_refill_ring_num_refi
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char refill_ring_num_refill[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_REFILL_MAX_RING);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REFILL_TLV_V:");
+			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REFILL_TLV_V:\n");
 
-	ARRAY_TO_STRING(refill_ring_num_refill,
-			htt_stats_buf->refill_ring_num_refill,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "refill_ring_num_refill = %s\n",
-			   refill_ring_num_refill);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "refill_ring_num_refill = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->refill_ring_num_refill, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3468,110 +3217,104 @@ static inline void htt_print_rx_pdev_fw_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char fw_ring_mgmt_subtype[HTT_MAX_STRING_LEN] = {0};
-	char fw_ring_ctrl_subtype[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ppdu_recvd = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ppdu_recvd = %u\n",
 			   htt_stats_buf->ppdu_recvd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt_fcs_ok = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt_fcs_ok = %u\n",
 			   htt_stats_buf->mpdu_cnt_fcs_ok);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt_fcs_err = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt_fcs_err = %u\n",
 			   htt_stats_buf->mpdu_cnt_fcs_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcp_msdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcp_msdu_cnt = %u\n",
 			   htt_stats_buf->tcp_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcp_ack_msdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcp_ack_msdu_cnt = %u\n",
 			   htt_stats_buf->tcp_ack_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "udp_msdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "udp_msdu_cnt = %u\n",
 			   htt_stats_buf->udp_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "other_msdu_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "other_msdu_cnt = %u\n",
 			   htt_stats_buf->other_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_ind = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_ind = %u\n",
 			   htt_stats_buf->fw_ring_mpdu_ind);
 
-	ARRAY_TO_STRING(fw_ring_mgmt_subtype,
-			htt_stats_buf->fw_ring_mgmt_subtype,
-			HTT_STATS_SUBTYPE_MAX);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mgmt_subtype = %s ",
-			   fw_ring_mgmt_subtype);
-
-	ARRAY_TO_STRING(fw_ring_ctrl_subtype,
-			htt_stats_buf->fw_ring_ctrl_subtype,
-			HTT_STATS_SUBTYPE_MAX);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_ctrl_subtype = %s ",
-			   fw_ring_ctrl_subtype);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mcast_data_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mgmt_subtype = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_ring_mgmt_subtype,
+		     HTT_STATS_SUBTYPE_MAX);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_ctrl_subtype = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_ring_ctrl_subtype,
+		     HTT_STATS_SUBTYPE_MAX);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mcast_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_mcast_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_bcast_data_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_bcast_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_bcast_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_ucast_data_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_ucast_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_ucast_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_null_data_msdu = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_null_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_null_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_drop = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_drop = %u\n",
 			   htt_stats_buf->fw_ring_mpdu_drop);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofld_local_data_ind_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofld_local_data_ind_cnt = %u\n",
 			   htt_stats_buf->ofld_local_data_ind_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_local_data_buf_recycle_cnt = %u",
+			   "ofld_local_data_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->ofld_local_data_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "drx_local_data_ind_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "drx_local_data_ind_cnt = %u\n",
 			   htt_stats_buf->drx_local_data_ind_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "drx_local_data_buf_recycle_cnt = %u",
+			   "drx_local_data_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->drx_local_data_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_nondata_ind_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_nondata_ind_cnt = %u\n",
 			   htt_stats_buf->local_nondata_ind_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_nondata_buf_recycle_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_nondata_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->local_nondata_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_status_buf_ring_refill_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_status_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->fw_status_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_status_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_status_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->fw_status_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_pkt_buf_ring_refill_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_pkt_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->fw_pkt_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_pkt_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_pkt_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->fw_pkt_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_link_buf_ring_refill_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_link_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->fw_link_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_link_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_link_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->fw_link_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_pkt_buf_ring_refill_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_pkt_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->host_pkt_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_pkt_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_pkt_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->host_pkt_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_pkt_buf_ring_refill_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_pkt_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->mon_pkt_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_pkt_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_pkt_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->mon_pkt_buf_ring_empty_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "mon_status_buf_ring_refill_cnt = %u",
+			   "mon_status_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->mon_status_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_status_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_status_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->mon_status_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_desc_buf_ring_refill_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_desc_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->mon_desc_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_desc_buf_ring_empty_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_desc_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->mon_desc_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_dest_ring_update_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_dest_ring_update_cnt = %u\n",
 			   htt_stats_buf->mon_dest_ring_update_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_dest_ring_full_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_dest_ring_full_cnt = %u\n",
 			   htt_stats_buf->mon_dest_ring_full_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_suspend_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_suspend_cnt = %u\n",
 			   htt_stats_buf->rx_suspend_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_suspend_fail_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_suspend_fail_cnt = %u\n",
 			   htt_stats_buf->rx_suspend_fail_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_resume_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_resume_cnt = %u\n",
 			   htt_stats_buf->rx_resume_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_resume_fail_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_resume_fail_cnt = %u\n",
 			   htt_stats_buf->rx_resume_fail_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ring_switch_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ring_switch_cnt = %u\n",
 			   htt_stats_buf->rx_ring_switch_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ring_restore_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ring_restore_cnt = %u\n",
 			   htt_stats_buf->rx_ring_restore_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_flush_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_flush_cnt = %u\n",
 			   htt_stats_buf->rx_flush_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_recovery_reset_cnt = %u\n",
 			   htt_stats_buf->rx_recovery_reset_cnt);
@@ -3592,16 +3335,14 @@ htt_print_rx_pdev_fw_ring_mpdu_err_tlv_v
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char fw_ring_mpdu_err[HTT_MAX_STRING_LEN] = {0};
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_FW_RING_MPDU_ERR_TLV_V:");
+			   "HTT_RX_PDEV_FW_RING_MPDU_ERR_TLV_V:\n");
 
-	ARRAY_TO_STRING(fw_ring_mpdu_err,
-			htt_stats_buf->fw_ring_mpdu_err,
-			HTT_RX_STATS_RXDMA_MAX_ERR);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_err = %s\n",
-			   fw_ring_mpdu_err);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_err = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_ring_mpdu_err,
+		     HTT_RX_STATS_RXDMA_MAX_ERR);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3620,15 +3361,13 @@ htt_print_rx_pdev_fw_mpdu_drop_tlv_v(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char fw_mpdu_drop[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_FW_DROP_REASON_MAX);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_MPDU_DROP_TLV_V:");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_MPDU_DROP_TLV_V:\n");
 
-	ARRAY_TO_STRING(fw_mpdu_drop,
-			htt_stats_buf->fw_mpdu_drop,
-			num_elems);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_mpdu_drop = %s\n", fw_mpdu_drop);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_mpdu_drop = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_mpdu_drop, num_elems);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3646,18 +3385,16 @@ htt_print_rx_pdev_fw_stats_phy_err_tlv(c
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	char phy_errs[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_PHY_ERR_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id__word = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_PHY_ERR_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id__word = %u\n",
 			   htt_stats_buf->mac_id__word);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_phy_err_nct = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_phy_err_nct = %u\n",
 			   htt_stats_buf->total_phy_err_cnt);
 
-	ARRAY_TO_STRING(phy_errs,
-			htt_stats_buf->phy_err,
-			HTT_STATS_PHY_ERR_MAX);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_errs = %s\n", phy_errs);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_errs = ");
+	ARRAY_TO_BUF(buf, len, htt_stats_buf->phy_err, HTT_STATS_PHY_ERR_MAX);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3676,20 +3413,20 @@ htt_print_pdev_cca_stats_hist_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nHTT_PDEV_CCA_STATS_HIST_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "chan_num = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_CCA_STATS_HIST_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "chan_num = %u\n",
 			   htt_stats_buf->chan_num);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "valid_cca_counters_bitmap = 0x%x",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "valid_cca_counters_bitmap = 0x%x\n",
 			   htt_stats_buf->valid_cca_counters_bitmap);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "collection_interval = %u\n",
 			   htt_stats_buf->collection_interval);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)");
+			   "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)\n");
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|");
+			   "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3709,7 +3446,7 @@ htt_print_pdev_stats_cca_counters_tlv(co
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|",
+			   "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|\n",
 			   htt_stats_buf->tx_frame_usec,
 			   htt_stats_buf->rx_frame_usec,
 			   htt_stats_buf->rx_clear_usec,
@@ -3735,29 +3472,29 @@ static inline void htt_print_hw_stats_wh
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_WHAL_TX_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_WHAL_TX_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_unpause_ppdu_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_unpause_ppdu_id = %u\n",
 			   htt_stats_buf->last_unpause_ppdu_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_unpause_wait_tqm_write = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_unpause_wait_tqm_write = %u\n",
 			   htt_stats_buf->hwsch_unpause_wait_tqm_write);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_dummy_tlv_skipped = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_dummy_tlv_skipped = %u\n",
 			   htt_stats_buf->hwsch_dummy_tlv_skipped);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "hwsch_misaligned_offset_received = %u",
+			   "hwsch_misaligned_offset_received = %u\n",
 			   htt_stats_buf->hwsch_misaligned_offset_received);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_reset_count = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_reset_count = %u\n",
 			   htt_stats_buf->hwsch_reset_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_dev_reset_war = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_dev_reset_war = %u\n",
 			   htt_stats_buf->hwsch_dev_reset_war);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_delayed_pause = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_delayed_pause = %u\n",
 			   htt_stats_buf->hwsch_delayed_pause);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_long_delayed_pause = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_long_delayed_pause = %u\n",
 			   htt_stats_buf->hwsch_long_delayed_pause);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_rx_ppdu_no_response = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_rx_ppdu_no_response = %u\n",
 			   htt_stats_buf->sch_rx_ppdu_no_response);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_selfgen_response = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_selfgen_response = %u\n",
 			   htt_stats_buf->sch_selfgen_response);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_rx_sifs_resp_trigger= %u\n",
 			   htt_stats_buf->sch_rx_sifs_resp_trigger);
@@ -3779,8 +3516,8 @@ htt_print_pdev_stats_twt_sessions_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSIONS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSIONS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u\n",
 			   htt_stats_buf->pdev_id);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sessions = %u\n",
 			   htt_stats_buf->num_sessions);
@@ -3802,24 +3539,24 @@ htt_print_pdev_stats_twt_session_tlv(con
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSION_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "vdev_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSION_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "vdev_id = %u\n",
 			   htt_stats_buf->vdev_id);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "peer_mac = %02x:%02x:%02x:%02x:%02x:%02x",
+			   "peer_mac = %02x:%02x:%02x:%02x:%02x:%02x\n",
 			   htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF,
 			   (htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF00) >> 8,
 			   (htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF0000) >> 16,
 			   (htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF000000) >> 24,
 			   (htt_stats_buf->peer_mac.mac_addr_h16 & 0xFF),
 			   (htt_stats_buf->peer_mac.mac_addr_h16 & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flow_id_flags = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "flow_id_flags = %u\n",
 			   htt_stats_buf->flow_id_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dialog_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "dialog_id = %u\n",
 			   htt_stats_buf->dialog_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wake_dura_us = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "wake_dura_us = %u\n",
 			   htt_stats_buf->wake_dura_us);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wake_intvl_us = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "wake_intvl_us = %u\n",
 			   htt_stats_buf->wake_intvl_us);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "sp_offset_us = %u\n",
 			   htt_stats_buf->sp_offset_us);
@@ -3841,7 +3578,7 @@ htt_print_pdev_obss_pd_stats_tlv_v(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "OBSS Tx success PPDU = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "OBSS Tx success PPDU = %u\n",
 			   htt_stats_buf->num_obss_tx_ppdu_success);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "OBSS Tx failures PPDU = %u\n",
 			   htt_stats_buf->num_obss_tx_ppdu_failure);
@@ -3878,25 +3615,25 @@ static inline void htt_print_backpressur
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u\n",
 			   htt_stats_buf->pdev_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_head_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_head_idx = %u\n",
 			   htt_stats_buf->current_head_idx);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_tail_idx = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_tail_idx = %u\n",
 			   htt_stats_buf->current_tail_idx);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_htt_msgs_sent = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_htt_msgs_sent = %u\n",
 			   htt_stats_buf->num_htt_msgs_sent);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "backpressure_time_ms = %u",
+			   "backpressure_time_ms = %u\n",
 			   htt_stats_buf->backpressure_time_ms);
 
 	for (i = 0; i < 5; i++)
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "backpressure_hist_%u = %u",
+				   "backpressure_hist_%u = %u\n",
 				   i + 1, htt_stats_buf->backpressure_hist[i]);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "============================");
+			   "============================\n");
 
 	if (len >= buf_len) {
 		buf[buf_len - 1] = 0;
@@ -3919,14 +3656,14 @@ static inline void htt_print_latency_pro
 
 	if (htt_stats_buf->print_header == 1) {
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "HTT_STATS_LATENCY_PROF_TLV:");
+				   "HTT_STATS_LATENCY_PROF_TLV:\n");
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
 				   "|  prof_name\t| cnt\t| min\t| max\t| last\t| tot\t|"
-				   " avg \t| hist_intvl\t| hist\t|");
+				   " avg \t| hist_intvl\t| hist\t|\n");
 	}
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "|%s| %8u| %8u| %8u| %8u| %8u| %8u| %8u| %4u:%4u:%4u|",
+			   "|%s| %8u| %8u| %8u| %8u| %8u| %8u| %8u| %4u:%4u:%4u|\n",
 			   htt_stats_buf->latency_prof_name, htt_stats_buf->cnt,
 			   htt_stats_buf->min, htt_stats_buf->max, htt_stats_buf->last,
 			   htt_stats_buf->tot, htt_stats_buf->avg,
@@ -3951,17 +3688,17 @@ static inline void htt_print_latency_pro
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_LATENCY_CTX_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len,"duration= %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_LATENCY_CTX_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len,"duration= %u\n",
 			   htt_stats_buf->duration);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "tx_msdu_cnt = %u", htt_stats_buf->tx_msdu_cnt);
+			   "tx_msdu_cnt = %u\n", htt_stats_buf->tx_msdu_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "tx_mpdu_cnt = %u", htt_stats_buf->tx_mpdu_cnt);
+			   "tx_mpdu_cnt = %u\n", htt_stats_buf->tx_mpdu_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_msdu_cnt = %u", htt_stats_buf->rx_msdu_cnt);
+			   "rx_msdu_cnt = %u\n", htt_stats_buf->rx_msdu_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_mpdu_cnt = %u", htt_stats_buf->rx_mpdu_cnt);
+			   "rx_mpdu_cnt = %u\n", htt_stats_buf->rx_mpdu_cnt);
 
 	if (len >= buf_len) {
 		buf[buf_len - 1] = 0;
@@ -3982,7 +3719,7 @@ static inline void htt_print_latency_pro
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prof_enable_cnt = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "prof_enable_cnt = %u\n",
 			   htt_stats_buf->prof_enable_cnt);
 
 	if (len >= buf_len) {
@@ -4003,55 +3740,45 @@ static inline void htt_print_ul_mumimo_t
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	u8 str_buf[HTT_MAX_STRING_LEN];
 	u8 j;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_UL_MUMIMO_TRIG_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+			   "HTT_RX_PDEV_UL_MUMIMO_TRIG_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_ul_mumimo_trig_stats_buf->mac_id__word & 0xFF);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_11ax_ul_mumimo = %u",
+			   "rx_11ax_ul_mumimo = %u\n",
 			   htt_ul_mumimo_trig_stats_buf->rx_11ax_ul_mumimo);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_mcs = %s ", str_buf);
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs_ext,
-			HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_ext_rx_mcs = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs,
+		     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_ext_rx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_mcs_ext,
+		     HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-		ARRAY_TO_STRING(str_buf, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi[j],
-				HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_gi[%u] = %s ",
-				   j, str_buf);
-		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-		ARRAY_TO_STRING(str_buf, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi_ext[j],
-				HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_gi_ext[%u] = %s ",
-				   j, str_buf);
-	}
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_nss,
-			HTT_RX_PDEV_STATS_ULNUM_SPATIAL_STREAMS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_bw,
-			HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_bw = %s ", str_buf);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_rx_gi[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi[j],
+			     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_rx_gi_ext[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_gi_ext[j],
+			     HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
+	}
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_rx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_nss,
+		     HTT_RX_PDEV_STATS_ULNUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_rx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_bw,
+		     HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_stbc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_rx_stbc = %u",
 			   htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_stbc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_mumimo_rx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_mumimo_rx_ldpc = %u\n\n",
 			   htt_ul_mumimo_trig_stats_buf->ul_mumimo_rx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len) {
 		buf[buf_len - 1] = 0;
@@ -4075,26 +3802,26 @@ static inline void htt_print_ul_mimo_use
 	if (htt_ul_user_stats_buf->user_index > HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER) {
 		if (htt_ul_user_stats_buf->user_index == 0) {
 			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "HTT_STATS_RX_PDEV_UL_MIMO_USER_STATS_TLV");
+					   "HTT_STATS_RX_PDEV_UL_MIMO_USER_STATS_TLV:\n");
 		}
 
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_ulmumimo_non_data_ppdu_%u = %u ",
+				   "rx_ulmumimo_non_data_ppdu_%u = %u\n",
 				   htt_ul_user_stats_buf->user_index,
 				   htt_ul_user_stats_buf->rx_ulmumimo_non_data_ppdu);
 
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_ulmumimo_data_ppdu_%u = %u ",
+				   "rx_ulmumimo_data_ppdu_%u = %u\n",
 				   htt_ul_user_stats_buf->user_index,
 				   htt_ul_user_stats_buf->rx_ulmumimo_data_ppdu);
 
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_ulmumimo_mpdu_ok_%u = %u ",
+				   "rx_ulmumimo_mpdu_ok_%u = %u\n",
 				   htt_ul_user_stats_buf->user_index,
 				   htt_ul_user_stats_buf->rx_ulmumimo_mpdu_ok);
 
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_ulmumimo_mpdu_fail_%u = %u",
+				   "rx_ulmumimo_mpdu_fail_%u = %u\n",
 				   htt_ul_user_stats_buf->user_index,
 				   htt_ul_user_stats_buf->rx_ulmumimo_mpdu_fail);
 	}
@@ -4120,31 +3847,31 @@ static inline void htt_print_ul_ofdma_us
 
 	if (htt_ul_user_stats_buf->user_index == 0) {
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "HTT_RX_PDEV_UL_OFDMA_USER_STAS_TLV");
+				   "HTT_RX_PDEV_UL_OFDMA_USER_STAS_TLV:\n");
 	}
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_non_data_ppdu_%u = %u ",
+			   "rx_ulofdma_non_data_ppdu_%u = %u\n",
 			   htt_ul_user_stats_buf->user_index,
 			   htt_ul_user_stats_buf->rx_ulofdma_non_data_ppdu);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_data_ppdu_%u = %u ",
+			   "rx_ulofdma_data_ppdu_%u = %u\n",
 			   htt_ul_user_stats_buf->user_index,
 			   htt_ul_user_stats_buf->rx_ulofdma_data_ppdu);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_mpdu_ok_%u = %u ",
+			   "rx_ulofdma_mpdu_ok_%u = %u\n",
 			   htt_ul_user_stats_buf->user_index,
 			   htt_ul_user_stats_buf->rx_ulofdma_mpdu_ok);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_mpdu_fail_%u = %u",
+			   "rx_ulofdma_mpdu_fail_%u = %u\n",
 			   htt_ul_user_stats_buf->user_index,
 			   htt_ul_user_stats_buf->rx_ulofdma_mpdu_fail);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_non_data_nusers_%u = %u",
+			   "rx_ulofdma_non_data_nusers_%u = %u\n",
 			   htt_ul_user_stats_buf->user_index,
 			   htt_ul_user_stats_buf->rx_ulofdma_non_data_nusers);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_data_nusers_%u = %u",
+			   "rx_ulofdma_data_nusers_%u = %u\n",
 			   htt_ul_user_stats_buf->user_index,
 			   htt_ul_user_stats_buf->rx_ulofdma_data_nusers);
 
@@ -4173,67 +3900,54 @@ static inline void htt_print_ul_ofdma_tr
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH11K_HTT_STATS_BUF_SIZE;
-	u8 str_buf[HTT_MAX_STRING_LEN];
 	u8 j;
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_UL_TRIGGER_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
+			   "HTT_RX_PDEV_UL_TRIGGER_STATS_TLV:\n");
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u\n",
 			   htt_trigger_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_ul_ofdma =%u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_ul_ofdma =%u\n",
 			   htt_trigger_stats_buf->rx_11ax_ul_ofdma);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->ul_ofdma_rx_mcs,
-			HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_mcs = %s ", str_buf);
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->ul_ofdma_rx_mcs_ext,
-			HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_mcs_ext = %s ", str_buf);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_mcs = ");
+	ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_mcs,
+		     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_mcs_ext = ");
+	ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_mcs_ext,
+		     HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
 
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-		ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->ul_ofdma_rx_gi[j],
-				HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s ",
-				   j, str_buf);
-		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-		ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->ul_ofdma_rx_gi_ext[j],
-				HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_gi_ext[%u] = %s ",
-				   j, str_buf);
-	}
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->ul_ofdma_rx_nss,
-			HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
-
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_nss = %s ", str_buf);
-
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->ul_ofdma_rx_bw,
-			HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_bw = %s ", str_buf);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_gi[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_gi[j],
+			     HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
+		len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_gi_ext[%u] = ", j);
+		ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_gi_ext[j],
+			     HTT_RX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS);
+	}
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_nss = ");
+	ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_nss,
+		     HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_bw = ");
+	ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->ul_ofdma_rx_bw,
+		     HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_stbc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_stbc = %u",
 			   htt_trigger_stats_buf->ul_ofdma_rx_stbc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_ldpc = %u",
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nul_ofdma_rx_ldpc = %u",
 			   htt_trigger_stats_buf->ul_ofdma_rx_ldpc);
 
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->rx_ulofdma_data_ru_size_ppdu,
-			HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_non_data_ru_size_ppdu = %s ", str_buf);
-	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
-	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->rx_ulofdma_non_data_ru_size_ppdu,
-			HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS);
+			   "\nrx_ulofdma_non_data_ru_size_ppdu = ");
+	ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->rx_ulofdma_data_ru_size_ppdu,
+		     HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS);
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "rx_ulofdma_data_ru_size_ppdu = %s ", str_buf);
-
+			   "\nrx_ulofdma_data_ru_size_ppdu = ");
+	ARRAY_TO_BUF(buf, len, htt_trigger_stats_buf->rx_ulofdma_non_data_ru_size_ppdu,
+		     HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len) {
@@ -4258,7 +3972,7 @@ static inline void htt_print_rx_fse_stat
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_RX_FSE_STATS_TLV: \n");
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "=== Software RX FSE STATS ===\n");
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "Enable count  = %u", htt_stats_buf->fse_enable_cnt);
+			   "Enable count  = %u\n", htt_stats_buf->fse_enable_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
 			   "Disable count = %u\n", htt_stats_buf->fse_disable_cnt);
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
