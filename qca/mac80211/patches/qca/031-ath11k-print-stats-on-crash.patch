--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -8,6 +8,7 @@
 #include <linux/remoteproc.h>
 #include <linux/firmware.h>
 #include <linux/of.h>
+#include <linux/of_platform.h>
 #include "core.h"
 #include "dp_tx.h"
 #include "dp_rx.h"
@@ -30,6 +31,8 @@ module_param_named(frame_mode, ath11k_fr
 MODULE_PARM_DESC(frame_mode,
 		 "Datapath frame mode (0: raw, 1: native wifi (default), 2: ethernet)");
 
+struct ath11k_soc *ath11k_soc[MAX_SOCS];
+
 static const struct ath11k_hw_params ath11k_hw_params[] = {
 	{
 		.hw_rev = ATH11K_HW_IPQ8074,
@@ -803,6 +806,98 @@ err_firmware_stop:
 	return ret;
 }
 
+void ath11k_core_dump_bp_stats(struct ath11k_base *ab)
+{
+	int len = 0;
+	const int size = 4096;
+	char *buf;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return;
+
+	len = ath11k_debugfs_dump_soc_ring_bp_stats(ab, buf, size - 1);
+
+	buf[len] = '\0';
+
+	ath11k_info(ab, "ATH11K Driver Stats\n%s\n", buf);
+
+	kfree(buf);
+}
+
+#ifdef CONFIG_QCOM_QMI_HELPERS
+
+/* Print the driver stats and crash the system on receiving this notification */
+int ath11k_core_ssr_notifier_cb(struct notifier_block *nb, unsigned long event,
+				void *data)
+{
+	struct ath11k_qmi *qmi = container_of(nb, struct ath11k_qmi, ssr_nb);
+	struct ath11k_base *ab = qmi->ab;
+	struct device *dev = ab->dev;
+	bool multi_pd_arch = false;
+#if LINUX_VERSION_IS_LESS(5, 4, 0)
+	const char *name;
+#else
+	phandle rproc_phandle;
+	struct device_node *rproc_node = NULL;
+	struct platform_device *pdev = NULL;
+	struct platform_device *ssr_pdev = (struct platform_device *)data;
+#endif
+
+	if (test_bit(ATH11K_FLAG_FW_RESTART_FOR_HOST, &qmi->ab->dev_flags)) {
+		return 0;
+	}
+
+#if LINUX_VERSION_IS_GEQ(5,4,0)
+	if (event != SUBSYS_RAMDUMP_NOTIFICATION)
+		return 0;
+#else
+	if (!test_bit(ATH11K_FLAG_REGISTERED, &ab->dev_flags))
+		return 0;
+#endif
+
+	/* Print the stats only if notification is received for expected PD*/
+	multi_pd_arch = of_property_read_bool(dev->of_node, "qcom,multipd_arch");
+	if (multi_pd_arch) {
+#if LINUX_VERSION_IS_LESS(5, 4, 0)
+		if (of_property_read_string(dev->of_node, "qcom,userpd-subsys-name", &name))
+			return 0;
+
+		if (strcmp((char*)data, name) != 0)
+			return 0;
+#else
+		if (of_property_read_u32(dev->of_node, "qcom,rproc",
+					 &rproc_phandle))
+			return 0;
+		rproc_node = of_find_node_by_phandle(rproc_phandle);
+		if (!rproc_node) {
+			ath11k_warn(ab, "ssr notification failed to get rproc_node\n");
+			return 0;
+		}
+		pdev = of_find_device_by_node(rproc_node);
+		if (!pdev) {
+			ath11k_warn(ab, "Failed to get pdev from device node\n");
+			return 0;
+		}
+		if (strcmp(ssr_pdev->name, pdev->name) != 0) {
+			ath11k_warn(ab, "SSR notification mismatch %s  pdev name:%s\n",
+				    (char *)data, pdev->name);
+			return 0;
+		}
+#endif
+	}
+
+	ath11k_core_dump_bp_stats(qmi->ab);
+	ath11k_hal_dump_srng_stats(qmi->ab);
+	/* TODO Add more driver stats */
+
+	/* Crash the system once all the stats are dumped */
+	BUG_ON(1);
+
+	return 0;
+}
+#endif
+
 int ath11k_core_qmi_firmware_ready(struct ath11k_base *ab)
 {
 	int ret;
@@ -848,6 +943,7 @@ int ath11k_core_qmi_firmware_ready(struc
 		ath11k_err(ab, "failed to create pdev core: %d\n", ret);
 		goto err_core_stop;
 	}
+
 	ath11k_hif_irq_enable(ab);
 	mutex_unlock(&ab->core_lock);
 
@@ -1053,6 +1149,14 @@ int ath11k_core_init(struct ath11k_base
 		return ret;
 	}
 
+#ifdef CONFIG_QCOM_QMI_HELPERS
+	/* Register a notifier after core init
+	 * to be called on fw crash
+	 */
+	ab->qmi.ssr_nb.notifier_call = ath11k_core_ssr_notifier_cb;
+	ath11k_hif_ssr_notifier_reg(ab);
+#endif
+
 	return 0;
 }
 EXPORT_SYMBOL(ath11k_core_init);
@@ -1061,6 +1165,13 @@ void ath11k_core_deinit(struct ath11k_ba
 {
 	mutex_lock(&ab->core_lock);
 
+#ifdef CONFIG_QCOM_QMI_HELPERS
+	/* Unregister the ssr notifier as we are not intersted
+	 * in receving these notifications after mac is unregistered.
+	 */
+	ath11k_hif_ssr_notifier_unreg(ab);
+
+#endif
 	ath11k_core_pdev_destroy(ab);
 	ath11k_core_stop(ab);
 
@@ -1083,6 +1194,8 @@ struct ath11k_base *ath11k_core_alloc(st
 				      const struct ath11k_bus_params *bus_params)
 {
 	struct ath11k_base *ab;
+	static atomic_t num_soc = ATOMIC_INIT(0);
+	int soc_idx = 0;
 
 	ab = kzalloc(sizeof(*ab) + priv_size, GFP_KERNEL);
 	if (!ab)
@@ -1109,6 +1222,10 @@ struct ath11k_base *ath11k_core_alloc(st
 	ab->dev = dev;
 	ab->bus_params = *bus_params;
 	ab->hif.bus = bus;
+	soc_idx = atomic_inc_return(&num_soc);
+	/* dec soc_idx to start from 0 */
+	if (--soc_idx < MAX_SOCS)
+		ath11k_soc[soc_idx] = ab;
 
 	return ab;
 
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -706,8 +706,8 @@ static int ath11k_fill_bp_stats(struct a
 	return len;
 }
 
-static ssize_t ath11k_debugfs_dump_soc_ring_bp_stats(struct ath11k_base *ab,
-						     char *buf, int size)
+ssize_t ath11k_debugfs_dump_soc_ring_bp_stats(struct ath11k_base *ab,
+					      char *buf, int size)
 {
 	struct ath11k_bp_stats *bp_stats;
 	bool stats_rxd = false;
--- a/drivers/net/wireless/ath/ath11k/debugfs.h
+++ b/drivers/net/wireless/ath/ath11k/debugfs.h
@@ -113,6 +113,8 @@ void ath11k_debugfs_unregister(struct at
 void ath11k_debugfs_fw_stats_process(struct ath11k_base *ab, struct sk_buff *skb);
 
 void ath11k_debugfs_fw_stats_init(struct ath11k *ar);
+ssize_t ath11k_debugfs_dump_soc_ring_bp_stats(struct ath11k_base *ab,
+					    char *buf, int size);
 
 static inline bool ath11k_debugfs_is_pktlog_lite_mode_enabled(struct ath11k *ar)
 {
@@ -146,6 +148,12 @@ static inline int ath11k_debugfs_rx_filt
 }
 
 #else
+ssize_t ath11k_debugfs_dump_soc_ring_bp_stats(struct ath11k_base *ab,
+					      char *buf, int size)
+{
+	return 0;
+}
+
 static inline int ath11k_debugfs_soc_create(struct ath11k_base *ab)
 {
 	return 0;
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -7,7 +7,9 @@
 #define ATH11K_QMI_H
 
 #include <linux/mutex.h>
+#include <linux/notifier.h>
 #include <linux/soc/qcom/qmi.h>
+#include <linux/remoteproc/qcom_rproc.h>
 
 #define ATH11K_HOST_VERSION_STRING		"WIN"
 #define ATH11K_QMI_WLANFW_TIMEOUT_MS		5000
@@ -123,6 +125,7 @@ struct ath11k_qmi {
 	struct workqueue_struct *event_wq;
 	struct list_head event_list;
 	spinlock_t event_lock; /* spinlock for qmi event list */
+	struct notifier_block ssr_nb;
 	struct ath11k_qmi_ce_cfg ce_cfg;
 	struct target_mem_chunk target_mem[ATH11K_QMI_WLANFW_MAX_NUM_MEM_SEG_V01];
 	u32 mem_seg_count;
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -41,6 +41,8 @@ extern unsigned int ath11k_frame_mode;
 
 #define ATH11K_MON_TIMER_INTERVAL  10
 
+#define MAX_SOCS	3
+
 enum ath11k_supported_bw {
 	ATH11K_BW_20	= 0,
 	ATH11K_BW_40	= 1,
--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -616,6 +616,31 @@ static int ath11k_ahb_map_service_to_pip
 	return 0;
 }
 
+#ifdef CONFIG_QCOM_QMI_HELPERS
+static void ath11k_ahb_ssr_notifier_reg(struct ath11k_base *ab)
+{
+#if LINUX_VERSION_IS_LESS(5, 4, 0)
+	qcom_register_ssr_notifier(&ab->qmi.ssr_nb);
+#else
+	struct ath11k_ahb *ab_ahb = ath11k_ahb_priv(ab);
+	rproc_register_subsys_notifier(ab_ahb->tgt_rproc->name,
+				       &ab->qmi.ssr_nb.notifier_call, NULL);
+#endif
+}
+
+static void ath11k_ahb_ssr_notifier_unreg(struct ath11k_base *ab)
+{
+#if LINUX_VERSION_IS_LESS(5, 4, 0)
+	qcom_unregister_ssr_notifier(&ab->qmi.ssr_nb);
+#else
+	struct ath11k_ahb *ab_ahb = ath11k_ahb_priv(ab);
+	rproc_unregister_subsys_notifier(ab_ahb->tgt_rproc->name,
+					 &ab->qmi.ssr_nb.notifier_call,
+					 NULL);
+#endif
+}
+#endif
+
 static const struct ath11k_hif_ops ath11k_ahb_hif_ops = {
 	.start = ath11k_ahb_start,
 	.stop = ath11k_ahb_stop,
@@ -626,6 +651,10 @@ static const struct ath11k_hif_ops ath11
 	.map_service_to_pipe = ath11k_ahb_map_service_to_pipe,
 	.power_down = ath11k_ahb_power_down,
 	.power_up = ath11k_ahb_power_up,
+#ifdef CONFIG_QCOM_QMI_HELPERS
+	.ssr_notifier_reg = ath11k_ahb_ssr_notifier_reg,
+	.ssr_notifier_unreg = ath11k_ahb_ssr_notifier_unreg,
+#endif
 };
 
 static int ath11k_core_get_rproc(struct ath11k_base *ab)
--- a/drivers/net/wireless/ath/ath11k/hif.h
+++ b/drivers/net/wireless/ath/ath11k/hif.h
@@ -29,6 +29,10 @@ struct ath11k_hif_ops {
 	void (*ce_irq_enable)(struct ath11k_base *ab);
 	void (*ce_irq_disable)(struct ath11k_base *ab);
 	void (*get_ce_msi_idx)(struct ath11k_base *ab, u32 ce_id, u32 *msi_idx);
+#ifdef CONFIG_QCOM_QMI_HELPERS
+	void (*ssr_notifier_reg)(struct ath11k_base *ab);
+	void (*ssr_notifier_unreg)(struct ath11k_base *ab);
+#endif
 };
 
 static inline void ath11k_hif_ce_irq_enable(struct ath11k_base *ab)
@@ -134,4 +138,22 @@ static inline void ath11k_get_ce_msi_idx
 	else
 		*msi_data_idx = ce_id;
 }
+
+#ifdef CONFIG_QCOM_QMI_HELPERS
+static inline void ath11k_hif_ssr_notifier_reg(struct ath11k_base *ab)
+{
+	if (!ab->hif.ops->ssr_notifier_reg)
+		return;
+
+	ab->hif.ops->ssr_notifier_reg(ab);
+}
+
+static inline void ath11k_hif_ssr_notifier_unreg(struct ath11k_base *ab)
+{
+	if (!ab->hif.ops->ssr_notifier_unreg)
+		return;
+
+	ab->hif.ops->ssr_notifier_unreg(ab);
+}
+#endif
 #endif /* _HIF_H_ */
