From 8b31b81012f183bf5d2f70f1d5ed6f35a01edc7a Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <kathirve@codeaurora.org>
Date: Sat, 31 Jul 2021 22:31:36 +0530
Subject: [PATCH] ath11k: sequence the radio probing

mac80211 is assiging wiphy idx based on the radio probing, during
the simultaneous wiphy idx is assigned randomly for each radios without
maintaining the order.

Sequencing the wiphy idx to maintain the probing order by waiting for
the completion of previous radio probe.

Signed-off-by: Karthikeyan Kathirvel <kathirve@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/ahb.c  | 6 ++++++
 drivers/net/wireless/ath/ath11k/core.c | 4 ++++
 drivers/net/wireless/ath/ath11k/mac.c  | 1 +
 drivers/net/wireless/ath/ath11k/pci.c  | 6 ++++++
 4 files changed, 17 insertions(+)

--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -890,6 +890,7 @@ static int ath11k_ahb_probe(struct platf
 	int ret = 0;
 	int userpd_id;
 	u32 hw_mode_id;
+	unsigned long left;
 
 	of_id = of_match_device(ath11k_ahb_of_match, &pdev->dev);
 	if (!of_id) {
@@ -922,6 +923,15 @@ static int ath11k_ahb_probe(struct platf
 	ab->enable_cold_boot_cal = ath11k_cold_boot_cal;
 	ab->userpd_id = userpd_id;
 
+	mutex_lock(&dev_init_lock);
+	left = wait_event_timeout(ath11k_radio_prb_wq, dev_init_progress == false,
+				  ATH11K_AHB_PROBE_SEQ_TIMEOUT);
+	dev_init_progress = true;
+	if (!left)
+		ath11k_dbg(ab, ATH11K_DBG_AHB, "dev init is concurrently processing"
+			   " this may cause random phy#\n");
+	mutex_unlock(&dev_init_lock);
+
 	platform_set_drvdata(pdev, ab);
 
 	if (ab->hw_rev != ATH11K_HW_QCN6122) {
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -51,6 +51,14 @@ MODULE_PARM_DESC(skip_radio_bmap, "Bitma
 unsigned int ath11k_skip_radio;
 EXPORT_SYMBOL(ath11k_skip_radio);
 
+wait_queue_head_t ath11k_radio_prb_wq;
+EXPORT_SYMBOL(ath11k_radio_prb_wq);
+
+bool dev_init_progress = false;
+EXPORT_SYMBOL(dev_init_progress);
+
+struct mutex dev_init_lock;
+EXPORT_SYMBOL(dev_init_lock);
 
 struct ath11k_base *ath11k_soc;
 
@@ -1545,6 +1553,9 @@ EXPORT_SYMBOL(ath11k_core_alloc);
 
 int ath11k_init(void)
 {
+	mutex_init(&dev_init_lock);
+	init_waitqueue_head(&ath11k_radio_prb_wq);
+
 	return ath11k_debugfs_create();
 }
 module_init(ath11k_init);
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -9507,6 +9507,8 @@ int ath11k_mac_allocate(struct ath11k_ba
 			ret = -ENOMEM;
 			goto err_free_mac;
 		}
+		dev_init_progress = false;
+		wake_up(&ath11k_radio_prb_wq);
 
 		ar = hw->priv;
 		ar->hw = hw;
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -1361,6 +1361,7 @@ static int ath11k_pci_probe(struct pci_d
 	u32 soc_hw_version, soc_hw_version_major, soc_hw_version_minor;
 	u32 addr;
 	int ret;
+	unsigned long left;
 
 	ab = ath11k_core_alloc(&pdev->dev, sizeof(*ab_pci), ATH11K_BUS_PCI,
 			       &ath11k_pci_bus_params);
@@ -1379,6 +1380,15 @@ static int ath11k_pci_probe(struct pci_d
 	pci_set_drvdata(pdev, ab);
 	ab->fw_recovery_support = false;
 
+	mutex_lock(&dev_init_lock);
+	left = wait_event_timeout(ath11k_radio_prb_wq, dev_init_progress == false,
+				  ATH11K_AHB_PROBE_SEQ_TIMEOUT);
+	dev_init_progress = true;
+	if (!left)
+		ath11k_dbg(ab, ATH11K_DBG_PCI, "dev init is concurrently processing"
+			   " this may cause random phy#\n");
+	mutex_unlock(&dev_init_lock);
+
 	spin_lock_init(&ab_pci->window_lock);
 
 	/* IPQ8074 reserves memory for FW, ath11k does not need to
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -30,6 +30,9 @@
 #include "cfr.h"
 
 extern unsigned int ath11k_skip_radio;
+extern wait_queue_head_t ath11k_radio_prb_wq;
+extern bool dev_init_progress;
+extern struct mutex dev_init_lock;
 
 #define SM(_v, _f) (((_v) << _f##_LSB) & _f##_MASK)
 
@@ -52,6 +55,8 @@ extern unsigned int ath11k_frame_mode;
 
 #define ATH11K_MON_TIMER_INTERVAL  10
 
+#define ATH11K_AHB_PROBE_SEQ_TIMEOUT	(2 * HZ)
+
 /* Shift value to set the dest rings hash map to the dest control register */
 #define HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT			8
 #define HAL_IPQ5018_REO_DEST_RING_CTRL_HASH_RING_SHIFT		0
