From 3c6e4e8da08f4d176e88c6f699774674cbf9cc3e Mon Sep 17 00:00:00 2001
From: bitthief <bitthief@protonmail.ch>
Date: Wed, 9 Mar 2022 05:03:18 +0200
Subject: [PATCH] qca-nss-ecm: use net.ct.tcp_no_window_check sysctl

---
 frontends/nss/ecm_nss_ported_ipv4.c | 8 +++++++-
 frontends/nss/ecm_nss_ported_ipv6.c | 8 +++++++-
 frontends/sfe/ecm_sfe_ported_ipv4.c | 8 +++++++-
 frontends/sfe/ecm_sfe_ported_ipv6.c | 8 +++++++-
 4 files changed, 28 insertions(+), 4 deletions(-)

--- a/frontends/nss/ecm_nss_ported_ipv4.c
+++ b/frontends/nss/ecm_nss_ported_ipv4.c
@@ -127,8 +127,10 @@ static int ecm_nss_ported_ipv4_accelerat
  * Expose what should be a static flag in the TCP connection tracker.
  */
 #ifdef ECM_OPENWRT_SUPPORT
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
 extern int nf_ct_tcp_no_window_check;
 #endif
+#endif
 extern int nf_ct_tcp_be_liberal;
 
 /*
@@ -1232,7 +1234,12 @@ static void ecm_nss_ported_ipv4_connecti
 			nircm->tcp_rule.return_end = ct->proto.tcp.seen[return_dir].td_end;
 			nircm->tcp_rule.return_max_end = ct->proto.tcp.seen[return_dir].td_maxend;
 #ifdef ECM_OPENWRT_SUPPORT
-			if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+			net = nf_ct_net(ct);
+           if (nf_ct_tcp_be_liberal || (net && net->ct.sysctl_no_window_check)
+#else
+        	if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#endif
 #else
 			if (nf_ct_tcp_be_liberal
 #endif
--- a/frontends/nss/ecm_nss_ported_ipv6.c
+++ b/frontends/nss/ecm_nss_ported_ipv6.c
@@ -127,8 +127,10 @@ static int ecm_nss_ported_ipv6_accelerat
  * Expose what should be a static flag in the TCP connection tracker.
  */
 #ifdef ECM_OPENWRT_SUPPORT
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
 extern int nf_ct_tcp_no_window_check;
 #endif
+#endif
 extern int nf_ct_tcp_be_liberal;
 
 /*
@@ -1158,7 +1160,12 @@ static void ecm_nss_ported_ipv6_connecti
 			nircm->tcp_rule.return_end = ct->proto.tcp.seen[return_dir].td_end;
 			nircm->tcp_rule.return_max_end = ct->proto.tcp.seen[return_dir].td_maxend;
 #ifdef ECM_OPENWRT_SUPPORT
-			if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+			net = nf_ct_net(ct);
+           if (nf_ct_tcp_be_liberal || (net && net->ct.sysctl_no_window_check)
+#else
+        	if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#endif
 #else
 			if (nf_ct_tcp_be_liberal
 #endif
--- a/frontends/sfe/ecm_sfe_ported_ipv4.c
+++ b/frontends/sfe/ecm_sfe_ported_ipv4.c
@@ -123,8 +123,10 @@ static int ecm_sfe_ported_ipv4_accelerat
  * Expose what should be a static flag in the TCP connection tracker.
  */
 #ifdef ECM_OPENWRT_SUPPORT
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
 extern int nf_ct_tcp_no_window_check;
 #endif
+#endif
 extern int nf_ct_tcp_be_liberal;
 
 /*
@@ -976,7 +978,12 @@ static void ecm_sfe_ported_ipv4_connecti
 			nircm->tcp_rule.return_end = ct->proto.tcp.seen[return_dir].td_end;
 			nircm->tcp_rule.return_max_end = ct->proto.tcp.seen[return_dir].td_maxend;
 #ifdef ECM_OPENWRT_SUPPORT
-			if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+			net = nf_ct_net(ct);
+           if (nf_ct_tcp_be_liberal || (net && net->ct.sysctl_no_window_check)
+#else
+        	if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#endif
 #else
 			if (nf_ct_tcp_be_liberal
 #endif
--- a/frontends/sfe/ecm_sfe_ported_ipv6.c
+++ b/frontends/sfe/ecm_sfe_ported_ipv6.c
@@ -124,8 +124,10 @@ static int ecm_sfe_ported_ipv6_accelerat
  * Expose what should be a static flag in the TCP connection tracker.
  */
 #ifdef ECM_OPENWRT_SUPPORT
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
 extern int nf_ct_tcp_no_window_check;
 #endif
+#endif
 extern int nf_ct_tcp_be_liberal;
 
 /*
@@ -935,7 +937,12 @@ static void ecm_sfe_ported_ipv6_connecti
 			nircm->tcp_rule.return_end = ct->proto.tcp.seen[return_dir].td_end;
 			nircm->tcp_rule.return_max_end = ct->proto.tcp.seen[return_dir].td_maxend;
 #ifdef ECM_OPENWRT_SUPPORT
-			if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+			net = nf_ct_net(ct);
+           if (nf_ct_tcp_be_liberal || (net && net->ct.sysctl_no_window_check)
+#else
+        	if (nf_ct_tcp_be_liberal || nf_ct_tcp_no_window_check
+#endif
 #else
 			if (nf_ct_tcp_be_liberal
 #endif
