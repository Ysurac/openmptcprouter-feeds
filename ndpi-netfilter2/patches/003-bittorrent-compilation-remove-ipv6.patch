--- a/src/lib/protocols/bittorrent.c.old	2023-07-15 11:45:44.566446059 +0200
+++ b/src/lib/protocols/bittorrent.c	2023-07-15 11:49:25.498828807 +0200
@@ -263,19 +263,6 @@
 	return key % (size-1);
 }
 
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-static inline u_int32_t  hash_calc6(ndpi_ip_addr_t *ip,u_int16_t port,u_int32_t size) {
-	u_int32_t M,I;
-	u_int8_t *ipp = (u_int8_t *)&I;
-	u_int32_t key;
-	M=103;
-	I = ip->ipv6.u6_addr.u6_addr32[0] + ip->ipv6.u6_addr.u6_addr32[1] + ip->ipv6.u6_addr.u6_addr32[2] + ip->ipv6.u6_addr.u6_addr32[3];
-	key = (((ipp[0] * M) + ipp[1] * M) + ipp[2]) * M +ipp[3];
-	ipp = (u_int8_t *)&port;
-	key = ((key * M) + ipp[0] * M) + ipp[1];
-	return key % (size-1);
-}
-#endif
 
 // ndpi_ip_addr_t 
 static struct hash_ip4p_node *hash_ip4p_add(struct hash_ip4p_table *ht, 
@@ -283,9 +270,6 @@
 struct hash_ip4p_node *n,*t;
 
 u_int32_t key = 
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-	ht->ipv6 ? hash_calc6(ip,port,ht->size) :
-#endif
 	hash_calc(ip,port,ht->size);
 
 n = NULL;
@@ -293,22 +277,6 @@
 spin_lock(&ht->tbl[key].lock);
 
     n = ht->tbl[key].top;
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    if(ht->ipv6) {
-	while(n) {
-	    if(!memcmp(&n->ip,ip->ipv6.u6_addr.u6_addr8,16) && n->port == port) {
-		    n->lchg = lchg;
-		    n->flag |= flag;
-		    move_up(&ht->tbl[key],n);
-		    goto unlock;
-	    }
-	    n = n->next;
-	}
-	n = BT_N_MALLOC(sizeof(struct hash_ip4p_node)+12);
-	if(!n) goto unlock;
-	memcpy(&n->ip,ip->ipv6.u6_addr.u6_addr8,16);
-    } else {
-#endif
 	while(n) {
 	    if(n->ip == ip->ipv4 && n->port == port) {
 		    n->lchg = lchg;
@@ -321,9 +289,6 @@
 	n = BT_N_MALLOC(sizeof(struct hash_ip4p_node));
 	if(!n) goto unlock;
 	n->ip = ip->ipv4;
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    }
-#endif
     t = ht->tbl[key].top;
     n->next = t;
     n->prev = NULL;
@@ -347,31 +312,16 @@
 struct hash_ip4p_node *n;
 
 u_int16_t key = 
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-	ht->ipv6 ? hash_calc6(ip,port,ht->size) :
-#endif
 	hash_calc(ip,port,ht->size);
 
 n = NULL;
 spin_lock(&ht->tbl[key].lock);
 
     n = ht->tbl[key].top;
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    if(ht->ipv6) {
-	while(n) {
-	    if(!memcmp(&n->ip,ip->ipv6.u6_addr.u6_addr8,16) && n->port == port)
-		    break;
-	    n = n->next;
-	} 
-    } else {
-#endif
 	while(n) {
 	    if(n->ip == ip->ipv4 && n->port == port)  break;
 	    n = n->next;
 	}
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    }
-#endif
     if(n) {
 #ifdef __KERNEL__
 	diagram(ndpi_btp_tm,sizeof(ndpi_btp_tm)/sizeof(ndpi_btp_tm[0]),lchg - n->lchg);
@@ -805,13 +755,6 @@
     u_int16_t s_port =  packet->udp ? packet->udp->source :
 			 packet->tcp ? packet->tcp->source : 0;
 
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-	if(packet->iphv6) 
-		bt_add_announce(ndpi_struct,
-				ndpi_struct->bt_ann, ndpi_struct->bt_ann_len,
-				1, (ndpi_ip_addr_t *)&packet->iphv6->ip6_src,
-				s_port, &x.p,p_now);
-#endif
 	if(packet->iph) 
 		bt_add_announce(ndpi_struct,
 				ndpi_struct->bt_ann, ndpi_struct->bt_ann_len,
@@ -819,39 +762,6 @@
 				s_port, &x.p,p_now);
 }
 #endif
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-if(packet->iphv6 && ndpi_struct->bt6_ht) {
-NDPI_LOG_DBG2(ndpi_struct,
-	   "BT: detected valid DHT6 %d %d\n",
-	   x.p.r.nn6,x.p.r.nv6);
-#ifndef __KERNEL__
-if(bt_parse_debug) dump_bt_proto_struct(&x.p);
-#endif
-	if(x.p.r.nodes6 && x.p.r.nn6) {
-	    struct bt_nodes6_data *n = x.p.r.nodes6;
-	    for(i=0; i < x.p.r.nn6; i++,n++) {
-		hash_ip4p_add(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&n->ip,n->port,p_now,0x2);
-
-		NDPI_LOG_DBG2(ndpi_struct,
-			   "BT: nodes6 add DHT peer %s:%d\n",
-			   inet_ntop(AF_INET6,(void *)&n->ip, ip6buf,sizeof(ip6buf)),
-			   htons(n->port));
-	    }
-	}
-	if(x.p.r.values6 && x.p.r.nv6) {
-	    struct bt_ipv6p2 *n = (struct bt_ipv6p2 *)x.p.r.values6;
-	    for(i=0; i < x.p.r.nv6; i++,n++) {
-		hash_ip4p_add(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&n->d.ip,n->d.port,p_now,0x4);
-
-		NDPI_LOG_DBG2(ndpi_struct,
-			   "BT: values6 add DHT peer %s:%d\n",
-			   inet_ntop(AF_INET6,(void *)&n->d.ip, ip6buf,sizeof(ip6buf)),
-			   htons(n->d.port));
-	    }
-	}
-	return r >= 0;
-}
-#endif
 
 if(!ndpi_struct->bt_ht) return r >= 0;
 
@@ -899,16 +809,6 @@
 static void ndpi_bt_add_peer_cache(struct ndpi_detection_module_struct *ndpi_struct,
 struct ndpi_packet_struct *packet, uint16_t p_src, uint16_t p_dst) {
 
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    if(ndpi_struct->bt6_ht && packet->iphv6) {
-	if(packet->packet_direction)
-		hash_ip4p_add(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&packet->iphv6->ip6_src,
-				p_src, packet->current_time,1);
-	   else
-		hash_ip4p_add(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&packet->iphv6->ip6_dst,
-				p_dst, packet->current_time,1);
-    } else 
-#endif
     if(ndpi_struct->bt_ht && packet->iph) {
 	if(packet->packet_direction)
 		hash_ip4p_add(ndpi_struct->bt_ht,(ndpi_ip_addr_t *)&packet->iph->saddr,
@@ -1073,19 +973,6 @@
     if(!packet->tcp) return 0;
     source = packet->tcp->source;
     dest = packet->tcp->dest;
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    if(ndpi_struct->bt6_ht && packet->iphv6) {
-	f1 = hash_ip4p_find(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&packet->iphv6->ip6_src,source,
-			    packet->current_time);
-	f2 = hash_ip4p_find(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&packet->iphv6->ip6_dst,dest,
-			    packet->current_time);
-#ifdef __KERNEL__
-	if(f1)	ndpi_ptss++;
-	if(f2)	ndpi_ptdd++;
-#endif
-    	return f1 != NULL || f2 != NULL;
-    }
-#endif
     if(ndpi_struct->bt_ht && packet->iph) {
 	f1 = hash_ip4p_find(ndpi_struct->bt_ht,(ndpi_ip_addr_t *)&packet->iph->saddr,source,
 			    packet->current_time);
@@ -1110,23 +997,6 @@
     if(!packet->udp) return 0;
     source = packet->udp->source;
     dest = packet->udp->dest;
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-    if(ndpi_struct->bt6_ht && packet->iphv6) {
-	f1 = hash_ip4p_find(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&packet->iphv6->ip6_src,source,
-			    packet->current_time);
-	f2 = hash_ip4p_find(ndpi_struct->bt6_ht,(ndpi_ip_addr_t *)&packet->iphv6->ip6_dst,dest,
-			    packet->current_time);
-#ifdef __KERNEL__
-	if(f1) {
-		DIRC(ndpi_pusr,ndpi_pusf);
-	}
-	if(f2)	{
-		DIRC(ndpi_pudr,ndpi_pudf);
-	}
-#endif
-    	return f1 != NULL || f2 != NULL;
-    }
-#endif
     if(ndpi_struct->bt_ht && packet->iph) {
 	f1 = hash_ip4p_find(ndpi_struct->bt_ht,(ndpi_ip_addr_t *)&packet->iph->saddr,source,
 			    packet->current_time);
@@ -1653,11 +1523,6 @@
 		u_int32_t size,u_int32_t size6,u_int32_t tmo,int logsize) {
 
 	ndpi_struct->bt_ht = hash_ip4p_init(size);
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-	ndpi_struct->bt6_ht = hash_ip4p_init(size6);
-	if(ndpi_struct->bt6_ht)
-		ndpi_struct->bt6_ht->ipv6=1;
-#endif
 	ndpi_bt_node_expire = tmo;
 #ifdef BT_ANNOUNCE
 	if(logsize > 0) {
@@ -1679,12 +1544,6 @@
 	hash_ip4p_del(ndpi_struct->bt_ht);
 	ndpi_struct->bt_ht = NULL;
 }
-#ifdef NDPI_DETECTION_SUPPORT_IPV6
-if(ndpi_struct->bt6_ht) {
-	hash_ip4p_del(ndpi_struct->bt6_ht);
-	ndpi_struct->bt6_ht = NULL;
-}
-#endif
 }
 
 void init_bittorrent_dissector(struct ndpi_detection_module_struct *ndpi_struct,
